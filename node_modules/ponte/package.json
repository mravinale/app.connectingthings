{
  "name": "ponte",
  "version": "0.0.7",
  "description": "The Internet of Things Bridge for REST developers",
  "main": "lib/ponte.js",
  "bin": {
    "ponte": "./bin/ponte"
  },
  "scripts": {
    "test": "mocha --recursive --bail --reporter spec test",
    "ci": "mocha --recursive --bail --watch test",
    "jshint-lib": "jshint lib/*.js",
    "jshint-test": "jshint test/*.js",
    "start": "./bin/ponte -v | bunyan"
  },
  "pre-commit": [
    "jshint-lib",
    "jshint-test",
    "test"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mcollina/ponte.git"
  },
  "bugs": {
    "url": "http://github.com/mcollina/ponte/issues"
  },
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "license": "BSD",
  "devDependencies": {
    "sinon-chai": "~2.4.0",
    "tmp": "0.0.23",
    "superagent": "~0.15.5",
    "sinon": "~1.7.3",
    "supertest": "~0.8.3",
    "chai": "~1.8.1",
    "mocha": "~1.17.0",
    "pre-commit": "0.0.4",
    "jshint": "~2.4.1"
  },
  "dependencies": {
    "express": "~3.4.8",
    "ascoltatori": "~0.12.2",
    "mosca": "~0.15.0",
    "commander": "~2.1.0",
    "bunyan": "~0.22.1",
    "mqtt": "~0.3.7",
    "async": "~0.2.9",
    "callback-stream": "~1.0.0",
    "xtend": "~2.1.2",
    "coap": "~0.5.3"
  },
  "readme": "Ponte\n=====\n\n[![Build\nStatus](https://travis-ci.org/mcollina/ponte.png)](https://travis-ci.org/mcollina/ponte)\n\n__Ponte__ is a multi-transport Internet of Things / Machine to Machine broker.\nAs the current state it supports [MQTT](http://mqtt.org/) and REST\nAPIs.\n\n![Ponte Architecture](./architecture.png)\n\n__Ponte__ is under active development, but it should work :).\nIf you plan to use Ponte in production\n[let us know](http://twitter.com/matteocollina), we'll be more than\nhappy to help you getting started and solve any issue you'll find out.\n\n\n## Installation \n\nPonte is a node.js application, so it needs [node.js](http://nodejs.org)\nto run.\n\n```\n$ npm install ponte bunyan -g\n$ ponte -v | bunyan\n```\n\nThen you can connect to it with your preferred [MQTT](http://mqtt.org),\n[CoAP](https://datatracker.ietf.org/doc/draft-ietf-core-coap/) or\n[HTTP](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client.\n\n### Command Line Options\n\n```\n$ ./bin/ponte --help\n\n  Usage: ponte [options]\n\n  Options:\n\n    -h, --help           output usage information\n    -V, --version        output the version number\n    -m, --mqtt-port <n>  the mqtt port to listen to\n    -p, --http-port <n>  the http port to listen to\n    -a, --coap-port <n>  the coap port to listen to\n    -d, --db <path>      the path were to store the database\n    -c, --config <c>     the config file to use (override every other\n     option)\n    -v, --verbose        set the bunyan log to INFO\n    --very-verbose       set the bunyan log to DEBUG\n```\n\n## Usage Example\n\nStart ponte:\n```\n$ ponte -v | bunyan\n```\n\n### Publishing from HTTP to MQTT\n\nPublish from HTTP:\n\n```\n$ curl -X PUT -d 'world' http://localhost:3000/resources/hello\n```\n\nThe messages from HTTP are _retained_, which means that are sent to\nevery new subscriber.\n\nSubscribe using `mosquitto_sub` ([mosquitto](http://mosquitto.org)):\n\n```\n$ mosquitto_sub -t \"/hello\" -v\n/hello world\n```\n\n### Publishing from MQTT to HTTP\n\nIn order to publish a message that can be read from HTTP,\na MQTT client needs to set the _retain_ flag.\nThis is how it is done using `mosquitto_pub`:\n\n```\n$ mosquitto_pub -t /hello-from-mqtt -m \"world\" -r\n```\n\nReading the published value is an HTTP GET away:\n\n```\n$ curl http://localhost:3000/resources/hello-from-mqtt\nworld\n```\n\n### Publishing from CoAP to MQTT\n\nYou can send CoAP messages from the command line using [coap-cli](http://github.com/mcollina/coap-cli)\nIn the following example we do a CoAP PUT to a resource:\n\n```\n$ echo -n 'world' | coap put coap://localhost/r/hello\n```\n\nSubscribe using `mosquitto_sub` ([mosquitto](http://mosquitto.org)):\n\n```\n$ mosquitto_sub -t \"/hello\" -v\n/hello world\n```\n\n### Publishing MQTT to CoAP\n\nIn order to publish a message that can be read from CoAP,\na MQTT client needs to set the _retain_ flag.\nThis is how it is done using `mosquitto_pub`:\n\n```\n$ mosquitto_pub -t /hello-from-mqtt -m \"world\" -r\n```\n\nIn order to receive the live updates with CoAP, we need to\nuse the observe switch:\n\n```\n$ coap -o coap://localhost/r/hello-from-mqtt\n```\n\n## Embedding\n\n__Ponte__ can be run in embbedded mode, by listening to specific events:\n\n```javascript\nvar ponte = require(\"ponte\");\nvar opts = {\n  logger: {\n    level: 'info'\n  },\n  http: {\n    port: 3000 // tcp\n  },\n  mqtt: {\n    port: 3001 // tcp\n  },\n  coap: {\n    port: 3000 // udp\n  },\n  persistence: {\n    type: 'level',\n    path: './db'\n  }\n};\nvar server = ponte(opts);\n\nserver.on(\"updated\", function(resource, buffer) {\n  console.log(\"Resource Updated\", resource, buffer);\n});\n```\n\n## Configuration\n\nTO BE DONE!\n\n## Pub/Sub Brokers\n\n__Ponte__ is based on\n[Ascoltatori](http://github.com/mcollina/ascoltatori), so it supports the same backends:\n\n* [RabbitMQ](http://www.rabbitmq.com/) and all implementations of\n  the [AMQP](http://www.amqp.org/) protocol.\n* [Redis](http://redis.io/), the fabulous key/value store by\n  [@antirez](https://github.com/antirez).\n* [Mosquitto](http://mosquitto.org/) and all implementations of the\n  [MQTT](http://mqtt.org/) protocol.\n* [MongoDB](http://www.mongodb.org/), the documental NoSQL that\n  is revolutioning how web apps are built.\n* [ZeroMQ](http://www.zeromq.org/) without a central broker, so\n  Ascoltatori can also be used in a P2P fashion.\n\n## Persistence\n\n__Ponte__ requires a persistent storage for HTTP syndication and MQTT\nsupport.\nAt the current state, it uses [Mosca](http://github.com/mcollina/mosca)\npersistence layer.\nThus, it offers several persitence options:\n\n* [Memory](http://mcollina.github.com/mosca/docs/lib/persistence/memory.js.html),\n* [LevelUp](http://mcollina.github.com/mosca/docs/lib/persistence/levelup.js.html),\n* [Redis](http://mcollina.github.com/mosca/docs/lib/persistence/redis.js.html),\n* [MongoDB](http://mcollina.github.com/mosca/docs/lib/persistence/mongo.js.html)\n\nAll of them can be configured from the configuration file, under the\n`persistence` key. The only exception is LevelUp, which can be specified\nby using the `--db` option from the command line.\n\n## To do\n\nThese are the new features you should expect in the coming\nmonths:\n\n* [ ] Better bootstrap sequence.\n* [x] Allow and document embedding inside other Node apps.\n* [ ] Add Web Hooks support.\n* [ ] Document configuration options.\n* [ ] Add WebSocket and Server-Sent Events support.\n* [ ] Add a Web App for reading and writing.\n* [x] Add CoAP support.\n* [ ] Standalone persistence layer.\n\nAny help is very welcome, so feel free to submit a pull-request.\n\n## Eclipse, QEST and Ponte\n\nPonte is a proposal at Eclipse, and this is a pure-JS rewrite of\n[QEST](http://github.com/mcollina/qest) in Javascript and on top of\n[Mosca](http://github.com/mcollina/mosca). \nYou can find the Eclipse Project Proposal here:\nhttp://eclipse.org/proposals/technology.ponte/\n\n## Contributing to Ponte\n\n* Check out the latest master to make sure the feature hasn't been\n  implemented or the bug hasn't been fixed yet\n* Check out the issue tracker to make sure someone already hasn't\n  requested it and/or contributed it\n* Fork the project\n* Start a feature/bugfix branch\n* Commit and push until you are happy with your contribution\n* Make sure to add tests for it. This is important so I don't break it\n  in a future version unintentionally.\n* Please try not to mess with the Makefile and package.json. If you\n  want to have your own version, or is otherwise necessary, that is\n  fine, but please isolate to its own commit so I can cherry-pick around\n  it.\n\n## LICENSE - \"New BSD License\"\n\nCopyright (c) 2013, Matteo Collina http://matteocollina.com\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following\n      disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer\n      in the documentation and/or other materials provided with the\n      distribution.\n    * Neither the name of the <organization> nor the\n      names of its contributors may be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\nAND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mcollina/ponte",
  "_id": "ponte@0.0.7",
  "dist": {
    "shasum": "62965f1c23e8d901395bb3bcc491ae5bc8d7b325"
  },
  "_from": "ponte@0.0.7",
  "_resolved": "https://registry.npmjs.org/ponte/-/ponte-0.0.7.tgz"
}
