"use strict";function Gauge(element,configuration){this.element=element;var self=this;this.configure=function(configuration){this.config=configuration,this.config.size=.9*this.config.size,this.config.raduis=.97*this.config.size/2,this.config.cx=this.config.size/2,this.config.cy=this.config.size/2,this.config.min=void 0!=configuration.min?configuration.min:0,this.config.max=void 0!=configuration.max?configuration.max:100,this.config.range=this.config.max-this.config.min,this.config.majorTicks=configuration.majorTicks||5,this.config.minorTicks=configuration.minorTicks||2,this.config.greenColor=configuration.greenColor||"#109618",this.config.yellowColor=configuration.yellowColor||"#ecbf52",this.config.redColor=configuration.redColor||"#EC6952",this.config.transitionDuration=configuration.transitionDuration||500},this.render=function(){this.body=d3.select(this.element).append("svg:svg").attr("class","gauge").attr("width",this.config.size).attr("height",this.config.size),this.body.append("svg:circle").attr("cx",this.config.cx).attr("cy",this.config.cy).attr("r",this.config.raduis).style("fill","#ccc").style("stroke","#000").style("stroke-width","0.5px"),this.body.append("svg:circle").attr("cx",this.config.cx).attr("cy",this.config.cy).attr("r",.9*this.config.raduis).style("fill","#fff").style("stroke","#e0e0e0").style("stroke-width","2px");for(var index in this.config.greenZones)this.drawBand(this.config.greenZones[index].from,this.config.greenZones[index].to,self.config.greenColor);for(var index in this.config.yellowZones)this.drawBand(this.config.yellowZones[index].from,this.config.yellowZones[index].to,self.config.yellowColor);for(var index in this.config.redZones)this.drawBand(this.config.redZones[index].from,this.config.redZones[index].to,self.config.redColor);if(void 0!=this.config.label){var fontSize=Math.round(this.config.size/9);this.body.append("svg:text").attr("x",this.config.cx).attr("y",this.config.cy/2+fontSize/2).attr("dy",fontSize/2).attr("text-anchor","middle").text(this.config.label).style("font-size",fontSize+"px").style("fill","#333").style("stroke-width","0px")}for(var fontSize=Math.round(this.config.size/16),majorDelta=this.config.range/(this.config.majorTicks-1),major=this.config.min;major<=this.config.max;major+=majorDelta){for(var minorDelta=majorDelta/this.config.minorTicks,minor=major+minorDelta;minor<Math.min(major+majorDelta,this.config.max);minor+=minorDelta){var point1=this.valueToPoint(minor,.75),point2=this.valueToPoint(minor,.85);this.body.append("svg:line").attr("x1",point1.x).attr("y1",point1.y).attr("x2",point2.x).attr("y2",point2.y).style("stroke","#666").style("stroke-width","1px")}var point1=this.valueToPoint(major,.7),point2=this.valueToPoint(major,.85);if(this.body.append("svg:line").attr("x1",point1.x).attr("y1",point1.y).attr("x2",point2.x).attr("y2",point2.y).style("stroke","#333").style("stroke-width","2px"),major==this.config.min||major==this.config.max){var point=this.valueToPoint(major,.63);this.body.append("svg:text").attr("x",point.x).attr("y",point.y).attr("dy",fontSize/3).attr("text-anchor",major==this.config.min?"start":"end").text(major).style("font-size",fontSize+"px").style("fill","#333").style("stroke-width","0px")}}var pointerContainer=this.body.append("svg:g").attr("class","pointerContainer"),midValue=(this.config.min+this.config.max)/2,pointerPath=this.buildPointerPath(midValue),pointerLine=d3.svg.line().x(function(d){return d.x}).y(function(d){return d.y}).interpolate("basis");pointerContainer.selectAll("path").data([pointerPath]).enter().append("svg:path").attr("d",pointerLine).style("fill","#ec5034").style("stroke","#ec5034").style("fill-opacity",.7),pointerContainer.append("svg:circle").attr("cx",this.config.cx).attr("cy",this.config.cy).attr("r",.12*this.config.raduis).style("fill","#26A69A").style("stroke","#666").style("opacity",1);var fontSize=Math.round(this.config.size/10);pointerContainer.selectAll("text").data([midValue]).enter().append("svg:text").attr("x",this.config.cx).attr("y",this.config.size-this.config.cy/4-fontSize).attr("dy",fontSize/2).attr("text-anchor","middle").style("font-size",fontSize+"px").style("fill","#000").style("stroke-width","0px"),this.redraw(this.config.min,0)},this.buildPointerPath=function(value){function valueToPoint(value,factor){var point=self.valueToPoint(value,factor);return point.x-=self.config.cx,point.y-=self.config.cy,point}var delta=this.config.range/13,head=valueToPoint(value,.85),head1=valueToPoint(value-delta,.12),head2=valueToPoint(value+delta,.12),tailValue=value-this.config.range*(1/.75)/2,tail=valueToPoint(tailValue,.28),tail1=valueToPoint(tailValue-delta,.12),tail2=valueToPoint(tailValue+delta,.12);return[head,head1,tail2,tail,tail1,head2,head]},this.drawBand=function(start,end,color){0>=end-start||this.body.append("svg:path").style("fill",color).attr("d",d3.svg.arc().startAngle(this.valueToRadians(start)).endAngle(this.valueToRadians(end)).innerRadius(.65*this.config.raduis).outerRadius(.85*this.config.raduis)).attr("transform",function(){return"translate("+self.config.cx+", "+self.config.cy+") rotate(270)"})},this.redraw=function(value,transitionDuration){var pointerContainer=this.body.select(".pointerContainer");pointerContainer.selectAll("text").text(Math.round(value));var pointer=pointerContainer.selectAll("path");pointer.transition().duration(void 0!=transitionDuration?transitionDuration:this.config.transitionDuration).attrTween("transform",function(){var pointerValue=value;value>self.config.max?pointerValue=self.config.max+.02*self.config.range:value<self.config.min&&(pointerValue=self.config.min-.02*self.config.range);var targetRotation=self.valueToDegrees(pointerValue)-90,currentRotation=self._currentRotation||targetRotation;return self._currentRotation=targetRotation,function(step){var rotation=currentRotation+(targetRotation-currentRotation)*step;return"translate("+self.config.cx+", "+self.config.cy+") rotate("+rotation+")"}})},this.valueToDegrees=function(value){return value/this.config.range*270-(this.config.min/this.config.range*270+45)},this.valueToRadians=function(value){return this.valueToDegrees(value)*Math.PI/180},this.valueToPoint=function(value,factor){return{x:this.config.cx-this.config.raduis*factor*Math.cos(this.valueToRadians(value)),y:this.config.cy-this.config.raduis*factor*Math.sin(this.valueToRadians(value))}},this.configure(configuration)}var app=angular.module("app",["ngAnimate","ngCookies","ngStorage","ui.router","ui.bootstrap","ui.load","ui.jq","ui.validate","pascalprecht.translate","app.filters","app.services","app.directives","app.controllers","ui.sortable","ngResource","ngSanitize","ngRoute","ngTable","http-auth-interceptor","autofill-directive","psResponsive","btford.socket-io","nvd3ChartDirectives","localytics.directives","ui.gravatar","reCAPTCHA","oitozero.ngSweetAlert","multiStepForm","dcbImgFallback","rt.encodeuri","gridster","angular-loading-bar","stripe.checkout","ng-bootstrap-alerts","ngMQTT"]).run(["$rootScope","$state","$stateParams",function($rootScope,$state,$stateParams){$rootScope.$state=$state,$rootScope.$stateParams=$stateParams}]).config(["$stateProvider","$urlRouterProvider","$controllerProvider","$compileProvider","$filterProvider","$provide","reCAPTCHAProvider","cfpLoadingBarProvider","StripeCheckoutProvider","MQTTProvider",function($stateProvider,$urlRouterProvider,$controllerProvider,$compileProvider,$filterProvider,$provide,reCAPTCHAProvider,cfpLoadingBarProvider,StripeCheckoutProvider,MQTTProvider){app.controller=$controllerProvider.register,app.directive=$compileProvider.directive,app.filter=$filterProvider.register,app.factory=$provide.factory,app.service=$provide.service,app.constant=$provide.constant,MQTTProvider.setHref("wss://"+window.location.host.split(":")[0]+":3001"),StripeCheckoutProvider.defaults({key:"pk_live_HUDm43LunKfEDyG1tdspWixx"}),reCAPTCHAProvider.setOptions({theme:"white"}),cfpLoadingBarProvider.includeSpinner=!1,$urlRouterProvider.otherwise("app/dashboard/me"),$stateProvider.state("app",{abstract:!0,url:"/app",templateUrl:"modules/base/views/app.html"}).state("app.dashboard",{url:"/dashboard",template:'<div ui-view class="fade-in-right"></div>'}).state("app.dashboard.me",{url:"/me",templateUrl:"modules/dashboards/views/dashboard_me.html",controller:"MyDashboardCtrl"}).state("app.dashboard.add",{url:"/add",templateUrl:"modules/dashboards/views/dashboard_add.html",controller:"DashboardAddCtrl"}).state("app.dashboard.edit",{url:"/edit/:id",templateUrl:"modules/dashboards/views/dashboard_edit.html",controller:"DashboardEditCtrl"}).state("app.dashboard.list",{url:"/list",templateUrl:"modules/dashboards/views/dashboard_list.html",controller:"DashboardListCtrl"}).state("app.section",{url:"/section",template:'<div ui-view class="fade-in-right"></div>'}).state("app.section.add",{url:"/add",templateUrl:"modules/sections/views/section_add.html",controller:"SectionAddCtrl"}).state("app.section.edit",{url:"/edit/:id",templateUrl:"modules/sections/views/section_edit.html",controller:"SectionEditCtrl"}).state("app.section.list",{url:"/list",templateUrl:"modules/sections/views/section_list.html",controller:"SectionListCtrl"}).state("app.panel",{url:"/panel",template:'<div ui-view class="fade-in-right"></div>'}).state("app.panel.add",{url:"/add",templateUrl:"modules/panels/views/panel_add.html",controller:"PanelAddCtrl"}).state("app.panel.edit",{url:"/edit/:id",templateUrl:"modules/panels/views/panel_edit.html",controller:"PanelEditCtrl"}).state("app.panel.list",{url:"/list",templateUrl:"modules/panels/views/panel_list.html",controller:"PanelListCtrl"}).state("app.device",{url:"/device",template:'<div ui-view class="fade-in-right"></div>'}).state("app.device.add",{url:"/add",templateUrl:"modules/devices/views/device_add.html",controller:"DeviceAddCtrl"}).state("app.device.edit",{url:"/edit/:id",templateUrl:"modules/devices/views/device_edit.html",controller:"DeviceEditCtrl"}).state("app.device.list",{url:"/list",templateUrl:"modules/devices/views/device_list.html",controller:"DeviceListCtrl"}).state("app.trigger",{url:"/trigger",template:'<div ui-view class="fade-in-right"></div>'}).state("app.trigger.add",{url:"/add",templateUrl:"modules/triggers/views/trigger_add.html",controller:"TriggerAddCtrl"}).state("app.trigger.edit",{url:"/edit/:id",templateUrl:"modules/triggers/views/trigger_edit.html",controller:"TriggerEditCtrl"}).state("app.trigger.list",{url:"/list",templateUrl:"modules/triggers/views/trigger_list.html",controller:"TriggerListCtrl"}).state("app.sensor",{url:"/sensor",template:'<div ui-view class="fade-in-right"></div>'}).state("app.sensor.add",{url:"/add",templateUrl:"modules/sensors/views/sensor_add.html",controller:"SensorAddCtrl"}).state("app.sensor.edit",{url:"/edit/:id",templateUrl:"modules/sensors/views/sensor_edit.html",controller:"SensorEditCtrl"}).state("app.sensor.list",{url:"/list",templateUrl:"modules/sensors/views/sensor_list.html",controller:"SensorListCtrl"}).state("app.camera",{url:"/camera",template:'<div ui-view class="fade-in-right"></div>'}).state("app.camera.add",{url:"/add",templateUrl:"modules/cameras/views/camera_add.html",controller:"CameraAddCtrl"}).state("app.camera.edit",{url:"/edit/:id",templateUrl:"modules/cameras/views/camera_edit.html",controller:"CameraEditCtrl"}).state("app.camera.list",{url:"/list",templateUrl:"modules/cameras/views/camera_list.html",controller:"CameraListCtrl"}).state("app.user",{url:"/user",template:'<div ui-view class="fade-in-right"></div>'}).state("app.user.add",{url:"/add",templateUrl:"modules/users/views/user_add.html",controller:"UserAddCtrl"}).state("app.user.edit",{url:"/edit/:id",templateUrl:"modules/users/views/user_edit.html",controller:"UserEditCtrl"}).state("app.user.settings",{url:"/settings/:id",templateUrl:"modules/users/views/user_settings.html",controller:"UserSettingsCtrl"}).state("app.user.list",{url:"/list",templateUrl:"modules/users/views/user_list.html",controller:"UserListCtrl"}).state("app.message",{url:"/message",template:'<div ui-view class="fade-in-right"></div>'}).state("app.message.list",{url:"/list",templateUrl:"modules/messages/views/message_list.html",controller:"MessageListCtrl"}).state("app.organization",{url:"/organization",template:'<div ui-view class="fade-in-right"></div>'}).state("app.organization.add",{url:"/add",templateUrl:"modules/organizations/views/organization_add.html",controller:"OrganizationAddCtrl"}).state("app.organization.edit",{url:"/edit/:id",templateUrl:"modules/organizations/views/organization_edit.html",controller:"OrganizationEditCtrl"}).state("app.organization.list",{url:"/list",templateUrl:"modules/organizations/views/organization_list.html",controller:"OrganizationListCtrl"}).state("app.public",{url:"/public",template:'<div ui-view class="fade-in-down"></div>'}).state("app.public.dashboard",{url:"/dashboard/:id",controller:"publicCtrl",templateUrl:"modules/base/views/dashboard.html"}).state("app.public.list",{url:"/list",controller:"publicListCtrl",templateUrl:"modules/base/views/dashboard_list.html"}).state("access",{url:"/access",template:'<div ui-view class="fade-in-right-big smooth"></div>'}).state("access.signin",{url:"/signin",templateUrl:"modules/base/views/login.html",controller:"LoginCtrl"}).state("access.signup",{url:"/signup",templateUrl:"modules/base/views/signup.html",controller:"SignupCtrl"}).state("access.forgotpwd",{url:"/forgotpwd",templateUrl:"modules/base/views/forgotpwd.html",controller:"ForgotPwdCtrl"}).state("access.changepwd",{url:"/changepwd",templateUrl:"modules/base/views/changepwd.html",controller:"ChangePwdCtrl"}).state("access.suscription",{url:"/suscription",templateUrl:"modules/base/views/suscription.html",controller:"SuscriptionCtrl"}).state("access.404",{url:"/404",templateUrl:"assets/tpl/page_404.html"})}]).run(["$rootScope","$localStorage","$location","sessionService","$state","userService",function($rootScope,$localStorage,$location,sessionService,$state,userService){$rootScope.showHeader=!0,$rootScope.$watch("currentUser",function(currentUser){if($rootScope.currentUser=$localStorage.currentUser?$localStorage.currentUser:$rootScope.currentUser,$rootScope.currentUser&&(window.Intercom("boot",{app_id:"rvvvm6rx",name:$rootScope.currentUser.username,email:$rootScope.currentUser.email,created_at:1234567890}),SupportKit.init({appToken:"c4petjl63pxfthtruwknea5in",name:$rootScope.currentUser.username,email:$rootScope.currentUser.email})),!$rootScope.currentUser&&["/logout","/access/signin","/access/signup","/access/suscription"].indexOf($location.path())==-1){if($location.path().indexOf("/app/public/dashboard/")>-1)return;if($location.path().indexOf("/app/public/list")>-1)return;if($location.path().indexOf("/access/changepwd")>-1)return;sessionService.getCurrentUser().success(function(response,status,headers,config){$localStorage.currentUser=response}).error(function(error,status,headers,config){$state.transitionTo("access.signin"),console.log(error)})}}),$rootScope.$on("$locationChangeSuccess",function(event,toState,toParams,fromState){}),$rootScope.$on("event:auth-loginRequired",function(){return $state.transitionTo("access.signin"),!1})}]).config(["$translateProvider",function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"assets/l10n/",suffix:".json"}),$translateProvider.preferredLanguage("en"),$translateProvider.useLocalStorage()}]).constant("JQ_CONFIG",{sparkline:["assets/js/jquery/charts/sparkline/jquery.sparkline.min.js"],plot:["assets/js/jquery/charts/flot/jquery.flot.min.js","assets/js/jquery/charts/flot/jquery.flot.resize.js","assets/js/jquery/charts/flot/jquery.flot.tooltip.min.js","assets/js/jquery/charts/flot/jquery.flot.spline.js","assets/js/jquery/charts/flot/jquery.flot.orderBars.js","assets/js/jquery/charts/flot/jquery.flot.pie.min.js"],slimScroll:["assets/js/jquery/slimscroll/jquery.slimscroll.min.js"],sortable:["assets/js/jquery/sortable/jquery.sortable.js"],nestable:["assets/js/jquery/nestable/jquery.nestable.js","assets/js/jquery/nestable/nestable.css"],filestyle:["assets/js/jquery/file/bootstrap-filestyle.min.js"],slider:["assets/js/jquery/slider/bootstrap-slider.js","assets/js/jquery/slider/slider.css"],chosen:["assets/js/jquery/chosen/chosen.jquery.min.js","assets/js/jquery/chosen/chosen.css"],TouchSpin:["assets/js/jquery/spinner/jquery.bootstrap-touchspin.min.js","assets/js/jquery/spinner/jquery.bootstrap-touchspin.css"],wysiwyg:["assets/js/jquery/wysiwyg/bootstrap-wysiwyg.js","assets/js/jquery/wysiwyg/jquery.hotkeys.js"],dataTable:["assets/js/jquery/datatables/jquery.dataTables.min.js","assets/js/jquery/datatables/dataTables.bootstrap.js","assets/js/jquery/datatables/dataTables.bootstrap.css"],vectorMap:["assets/js/jquery/jvectormap/jquery-jvectormap.min.js","assets/js/jquery/jvectormap/jquery-jvectormap-world-mill-en.js","assets/js/jquery/jvectormap/jquery-jvectormap-us-aea-en.js","assets/js/jquery/jvectormap/jquery-jvectormap.css"],footable:["assets/js/jquery/footable/footable.all.min.js","assets/js/jquery/footable/footable.core.css"]});angular.module("app.filters",[]).filter("fromNow",function(){return function(date){return moment(date).fromNow()}}),angular.module("app.services",[]),angular.module("app.directives",["ui.load"]).directive("uiShift",["$timeout",function($timeout){return{restrict:"A",replace:!0,link:function(scope,el,attr){function sm(){$timeout(function(){var method=attr.uiShift,target=attr.target;_el.hasClass("in")||_el[method](target).addClass("in")})}function md(){parent&&parent.prepend(el),!parent&&_el.insertAfter(prev),_el.removeClass("in")}var parent,_el=$(el),_window=$(window),prev=_el.prev(),width=_window.width();!prev.length&&(parent=_el.parent()),width<768&&sm()||md(),_window.resize(function(){width!==_window.width()&&$timeout(function(){_window.width()<768&&sm()||md(),width=_window.width()})})}}}]).directive("uiToggleClass",["$timeout","$document",function($timeout,$document){return{restrict:"AC",replace:!0,link:function(scope,el,attr){el.on("click",function(e){function magic(_class,target){for(var patt=new RegExp("\\s"+_class.replace(/\*/g,"[A-Za-z0-9-_]+").split(" ").join("\\s|\\s")+"\\s","g"),cn=" "+$(target)[0].className+" ";patt.test(cn);)cn=cn.replace(patt," ");$(target)[0].className=$.trim(cn)}e.preventDefault();var classes=attr.uiToggleClass.split(","),targets=attr.target&&attr.target.split(",")||Array(el),key=0;angular.forEach(classes,function(_class){var target=targets[targets.length&&key];_class.indexOf("*")!==-1&&magic(_class,target),$(target).toggleClass(_class),key++}),$(el).toggleClass("active")})}}}]).directive("uiNav",["$timeout",function($timeout){return{restrict:"AC",replace:!0,link:function(scope,el,attr){var _window=$(window),_mb=768;$(el).on("click","a",function(e){var _this=$(this);_this.parent().siblings(".active").toggleClass("active"),_this.parent().toggleClass("active"),_this.next().is("ul")&&e.preventDefault(),_this.next().is("ul")||_window.width()<_mb&&$(".app-aside").toggleClass("show")});var next,wrap=$(".app-aside");$(el).on("mouseenter","a",function(e){if($(".app-aside-fixed.app-aside-folded").length&&!(_window.width()<_mb)){var _this=$(this);next&&next.trigger("mouseleave.nav"),_this.next().is("ul")&&(next=_this.next(),next.appendTo(wrap).css("top",_this.offset().top-_this.height()),next.on("mouseleave.nav",function(e){next.appendTo(_this.parent()),next.off("mouseleave.nav"),_this.parent().removeClass("active")}),_this.parent().addClass("active"))}}),wrap.on("mouseleave",function(e){next&&next.trigger("mouseleave.nav")})}}}]).directive("uiScroll",["$location","$anchorScroll",function($location,$anchorScroll){return{restrict:"AC",replace:!0,link:function(scope,el,attr){el.on("click",function(e){$location.hash(attr.uiScroll),$anchorScroll()})}}}]).directive("uiFullscreen",["uiLoad",function(uiLoad){return{restrict:"AC",template:'<i class="fa fa-expand fa-fw text"></i><i class="fa fa-compress fa-fw text-active"></i>',link:function(scope,el,attr){el.addClass("hide"),screenfull.enabled&&el.removeClass("hide"),el.on("click",function(){var target;attr.target&&(target=$(attr.target)[0]),el.toggleClass("active"),screenfull.toggle(target)})}}}]).directive("uiButterbar",["$rootScope",function($rootScope){return{restrict:"AC",template:'<span class="bar"></span>',link:function(scope,el,attrs){el.addClass("butterbar hide"),scope.$on("$stateChangeStart",function(event){el.removeClass("hide").addClass("active")}),scope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState){event.targetScope.$watch("$viewContentLoaded",function(){el.addClass("hide").removeClass("active")})})}}}]),angular.module("app.controllers",["pascalprecht.translate","ngCookies"]).controller("AppCtrl",["$scope","$rootScope","$translate","$localStorage","$route","$location",function($scope,$rootScope,$translate,$localStorage,$route,$location){var isTouchDevice=!!("ontouchstart"in window),isIE=!!navigator.userAgent.match(/MSIE/i);!isTouchDevice&&$("html").addClass("no-touch"),isIE&&$("html").addClass("ie"),$scope.app={name:"ConnectingThings",version:"1.0.3",color:{primary:"#7266ba",info:"#23b7e5",success:"#27c24c",warning:"#fad733",danger:"#f05050",light:"#e8eff0",dark:"#3a3f51",black:"#1c2b36"},settings:{themeID:10,navbarHeaderColor:"bg-info dker",navbarCollapseColor:"bg-info dk",asideColor:"bg-black",headerFixed:!0,asideFixed:!1,asideFolded:!1,noMenu:""}},$rootScope.app=$scope.app,$localStorage.settings=$scope.app.settings,$scope.$watch("app.settings",function(){$localStorage.settings=$scope.app.settings},!0),$scope.langs={en:"English",es_ES:"Spanish"},$scope.selectLang=$scope.langs[$translate.proposedLanguage()]||"English",$scope.setLang=function(langKey){$scope.selectLang=$scope.langs[langKey],$translate.use(langKey)},$rootScope.$on("$stateChangeSuccess",function(event,current,previous,rejection){window.Intercom("update"),_.contains(["/access/signin","/access/signup","/access/forgotpwd","/access/suscription"],$location.$$url)?$rootScope.enableExternal=!0:$rootScope.enableExternal=!1,"app.public.dashboard"==current.name&&($scope.app.settings.asideFixed=!0,$scope.app.settings.asideFolded=!0)})}]),angular.module("app").controller("MyDashboardCtrl",["$scope","panelService","sectionService","$localStorage","dashboardService","$rootScope","$modal","$log","SweetAlert",function($scope,panelService,sectionService,$localStorage,dashboardService,$rootScope,$modal,$log,SweetAlert){$scope.dashboards=[],$scope.items=[],$scope.tab={name:null,id:null},$scope.dashStyle={color:"rgba(0,0,0,.075)"},$scope.areOptionsEnabled=!0,$scope.setTab=function(dashboard){$scope.tab.name=dashboard.name,$scope.tab.id=dashboard._id,$scope.init()},$scope.toggleView=function(){$scope.showOptions=!$scope.showOptions},$scope.init=function(){dashboardService.getAllDashboards().success(function(response,status,headers,config){$scope.dashboards=response,_.each($scope.dashboards,function(dashboard){var items=_.union(dashboard.panels,dashboard.sections);dashboard.items=items.length<=0?[{}]:items}),$scope.tab.name=$scope.tab.name?$scope.tab.name:response[0].name,$scope.tab.id=$scope.tab.id?$scope.tab.id:response[0]._id,$localStorage.currentDashboard=$scope.tab}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})},$rootScope.$on("reload-myDashboard",function(event,args){$scope.init()}),$scope.gridsterOpts={minColumns:1,swapping:!1,avoid_overlapped_widgets:!0,width:"auto",colWidth:"auto",rowHeight:"80",resizable:{enabled:!0,start:function(event,uiWidget,$element){},resize:function(event,uiWidget,$element){},stop:function(event,uiWidget,$element){}},draggable:{enabled:!0,start:function(event,$element,widget){},drag:function(event,$element,widget){},stop:function(event,$element,widget){}}},$scope.$watch("dashboards",function(newitems,olditems){var cleanedNewItems=angular.fromJson(angular.toJson(newitems)),cleanedOldItems=angular.fromJson(angular.toJson(olditems)),delta=jsondiffpatch.diff(cleanedNewItems,cleanedOldItems);if(delta&&_.values(delta)[0]&&_.values(delta)[0].items){var sections=_.where(cleanedNewItems,{name:$scope.tab.name})[0].sections;if(sections){var sectionChanged=_.values(delta)[0].sections,sectionChangedKey=parseInt(_.first(_.keys(sectionChanged)));sections[sectionChangedKey]&&sectionService.update(sections[sectionChangedKey]).success(function(response,status,headers,config){$localStorage.myDashboards=$scope.dashboards}).error(function(response,status,headers,config){console.log(response)});var panels=_.where(cleanedNewItems,{name:$scope.tab.name})[0].panels;if(panels){var panelChanged=_.values(delta)[0].panels,panelChangedKey=parseInt(_.first(_.keys(panelChanged)));panels[panelChangedKey]&&panelService.update(panels[panelChangedKey]).success(function(response,status,headers,config){$localStorage.myDashboards=$scope.dashboards}).error(function(response,status,headers,config){console.log(response)})}}}},!0),$scope.editDashboard=function(){var modalInstance=$modal.open({templateUrl:"../modules/dashboards/views/dashboard_edit.html",controller:"DashboardEditCtrl",size:"lg",resolve:{dashboardId:function(){return $scope.tab.id}}});modalInstance.result.then(function(){$scope.init()},function(){$log.info("editDashboard dismissed at: "+new Date)})},$scope.addDashboard=function(){var modalInstance=$modal.open({templateUrl:"../modules/dashboards/views/dashboard_add.html",controller:"DashboardAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.init()},function(){$log.info("addDashboard dismissed at: "+new Date)})},$scope.addPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_add_container.html",controller:"PanelAddContainerCtrl",size:"lg"});modalInstance.result.then(function(){$scope.init()},function(){$log.info("newDashboard dismissed at: "+new Date)})},$scope.addSection=function(){var modalInstance=$modal.open({templateUrl:"../modules/sections/views/section_add.html",controller:"SectionAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.init()},function(){$log.info("newSection dismissed at: "+new Date)})},$scope.deleteDashboard=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this dashboard!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&dashboardService.remove($scope.tab.id).success(function(response,status,headers,config){$scope.setTab($scope.dashboards[0]),$scope.init()}).error(function(response,status,headers,config){$log.info("deleted dashboard dismissed at: "+new Date)})})},$scope.init()}]),angular.module("app").controller("LoginCtrl",["$scope","$rootScope","sessionService","$localStorage","$location","$modal","$log",function($scope,$rootScope,sessionService,$localStorage,$location,$modal,$log){$scope.errors={},$scope.submitted=!1,$rootScope.showHeader=!0,$scope.init=function(form){},$scope.login=function(form){$scope.submitted=!0,form.email.$error.required||sessionService.login("password",$scope.user).success(function(response,status,headers,config){$localStorage.currentUser=response,$rootScope.currentUser=$localStorage.currentUser,$location.path("/"),$rootScope.currentUser.showTutorial&&showTutorial()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type}),$scope.errors.other=response.message})};var showTutorial=function(deviceId){var modalInstance=$modal.open({templateUrl:"/modules/base/views/modals/tutorial.html",controller:"tutorialCtrl",size:"lg"});modalInstance.result.then(function(){$log.info("editDevice ok at: "+new Date)},function(){$log.info("editDevice dismissed at: "+new Date)})};$scope.init()}]),angular.module("app").controller("SignupCtrl",["$scope","$rootScope","$location","sessionService","$localStorage","reCAPTCHA",function($scope,$rootScope,$location,sessionService,$localStorage,reCAPTCHA){$scope.user={},$scope.submitted=!1,reCAPTCHA.setPublicKey("6LctfAITAAAAAMCUAZHyTfTb2TE-Nhx7Bb2wJspE"),$scope.register=function(form){$scope.errors={},$scope.submitted=!0,sessionService.create($scope.user).success(function(response,status,headers,config){$rootScope.currentUser=null,$localStorage.$reset(),$location.path("/access/suscription").search({message:"Check your email for complete your sign up process"})}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}}]),angular.module("app").controller("ForgotPwdCtrl",["$scope","$rootScope","$location","sessionService","$localStorage","reCAPTCHA",function($scope,$rootScope,$location,sessionService,$localStorage,reCAPTCHA){$rootScope.enableExternal=!0,$scope.sendChangePwdEmail=function(form){$scope.errors={},$scope.submitted=!0,sessionService.sendChangePwdEmail($scope.email).success(function(response,status,headers,config){$rootScope.currentUser=null,$localStorage.$reset(),$location.path("/access/signin").search({})}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}}]),angular.module("app").controller("ChangePwdCtrl",["$scope","$rootScope","$location","sessionService","$localStorage",function($scope,$rootScope,$location,sessionService,$localStorage){$scope.guid=$location.search().guid,$rootScope.enableExternal=!0,$scope.changePassword=function(form){return $scope.errors={},$scope.submitted=!0,$scope.password?$scope.password2?$scope.password!==$scope.password2?(form.password.$setValidity("mongoose",!1),$scope.errors.password="Password does not not match",form.password2.$setValidity("mongoose",!1),void($scope.errors.password2="Password does not not match")):void sessionService.confirmPwd({guid:$scope.guid,pwd:$scope.password}).success(function(response,status,headers,config){$rootScope.currentUser=null,$localStorage.$reset(),$location.path("/access/signin").search({})}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}):(form.password2.$setValidity("mongoose",!1),void($scope.errors.password2="Field required")):(form.password.$setValidity("mongoose",!1),void($scope.errors.password="Field required"))}}]),angular.module("app").controller("SuscriptionCtrl",["$scope","$rootScope","$location","sessionService",function($scope,$rootScope,$location,sessionService){$rootScope.enableExternal=!0,$scope.init=function(form){if($scope.isButtonLoginEnabled=!1,$scope.isButtonSignupEnabled=!1,$location.search().message&&($scope.message=$location.search().message,$scope.isButtonLoginEnabled=!1,$scope.isButtonSignupEnabled=!1),$location.search().confirmation){var confirmationId=$location.search().confirmation;sessionService.confirmUser(confirmationId).success(function(response,status,headers,config){null===response?($scope.message="Sorry, this confirmation has expired, create a new account",$scope.isButtonSignupEnabled=!0):($scope.message="Congratulations, now you are able to login!",$scope.isButtonLoginEnabled=!0)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type}),$scope.errors.other=response.message})}},$scope.init()}]),angular.module("app").controller("NavbarCtrl",["$scope","$rootScope","$localStorage","sessionService","$state",function($scope,$rootScope,$localStorage,sessionService,$state){}]),angular.module("app").controller("HeaderCtrl",["$scope","$rootScope","$modal","$localStorage","sessionService","$location","$state","$log",function($scope,$rootScope,$modal,$localStorage,sessionService,$location,$state,$log){
$scope.settings=function(){$modal.open({templateUrl:"/modules/users/views/user_settings.html",controller:"UserSettingsCtrl",size:"lg",resolve:{userId:function(){return $localStorage.currentUser._id}}})},$scope.showTutorial=function(){var modalInstance=$modal.open({templateUrl:"/modules/base/views/modals/tutorial.html",controller:"tutorialCtrl",size:"lg"});modalInstance.result.then(function(){$log.info("showTutorial ok at: "+new Date)},function(){$log.info("showTutorial dismissed at: "+new Date)})},$scope.payment=function(){var modalInstance=$modal.open({templateUrl:"/modules/base/views/modals/payment.html",controller:"paymentCtrl",size:"lg",resolve:{userId:function(){return $localStorage.currentUser._id}}});modalInstance.result.then(function(){$log.info("editDevice ok at: "+new Date)},function(){$log.info("editDevice dismissed at: "+new Date)})},$scope.logout=function(){sessionService.remove().success(function(response,status){console.log("Ok:",response)}).error(function(response,status){console.log("Error:",response)}).finally(function(){$rootScope.currentUser=void 0,$localStorage.$reset(),location.reload(),$state.transitionTo("access.signin")})},$scope.addDashboard=function(){var modalInstance=$modal.open({templateUrl:"/modules/dashboards/views/dashboard_add.html",controller:"DashboardAddCtrl",size:"lg"});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("addDashboard dismissed at: "+new Date)})}}]),angular.module("app").controller("publicCtrl",["$scope","$rootScope","panelService","sectionService","$localStorage","publicService","$routeParams","$state","$route","psResponsive","$window",function($scope,$rootScope,panelService,sectionService,$localStorage,publicService,$routeParams,$state,$route,psResponsive,$window){$scope.dashboards=[],$scope.tab={name:null,id:null},$scope.areOptionsEnabled=!1,$scope.setTab=function(dashboard){$scope.tab.name=dashboard.name,$scope.tab.id=dashboard._id,$scope.init()},$rootScope.showHeader=!1,$rootScope.app.settings.asideFolded=!0,$scope.$on("$destroy",function(){$rootScope.showHeader=!0,$rootScope.app.settings.asideFolded=!1,$rootScope.noMenuStyle={}}),psResponsive("< small")?$rootScope.noMenuStyle={"padding-top":"0px",width:"105%","background-color":"none"}:$rootScope.noMenuStyle={"padding-top":"0px","margin-left":"-60px",width:"105%","background-color":"none"},angular.element($window).on("resize",function(){psResponsive("< small")?$rootScope.noMenuStyle={"padding-top":"0px",width:"105%","background-color":"none"}:$rootScope.noMenuStyle={"padding-top":"0px","margin-left":"-60px",width:"105%","background-color":"none"}}),$scope.gridsterOpts={minColumns:1,swapping:!1,avoid_overlapped_widgets:!0,width:"auto",colWidth:"auto",rowHeight:"80",resizable:{enabled:!1,start:function(event,uiWidget,$element){},resize:function(event,uiWidget,$element){},stop:function(event,uiWidget,$element){}},draggable:{enabled:!1,start:function(event,$element,widget){},drag:function(event,$element,widget){},stop:function(event,$element,widget){}}},$scope.init=function(){publicService.getAllDashboards($state.params.id).success(function(response,status,headers,config){$scope.dashboards=response,response&&response[0]&&($scope.user=response[0].owner?response[0].owner:null,(!$rootScope.currentUser||"mravinale@gmail.com"===$rootScope.currentUser.email||$scope.user&&"Free"!=$scope.user.accountType)&&(_.each($scope.dashboards,function(dashboard){var items=_.union(dashboard.panels,dashboard.sections);dashboard.items=items.length<=0?[{}]:items}),$scope.tab.name=$scope.tab.name?$scope.tab.name:response[0].name,$scope.tab.id=$scope.tab.id?$scope.tab.id:response[0]._id,$localStorage.currentDashboard=$scope.tab))}).error(function(response,status,headers,config){$state.transitionTo("access.signin")})},$scope.init()}]),angular.module("app").controller("publicListCtrl",["$scope","$rootScope","panelService","sectionService","$localStorage","publicService","$routeParams","$state","$route","psResponsive","$window",function($scope,$rootScope,panelService,sectionService,$localStorage,publicService,$routeParams,$state,$route,psResponsive,$window){$scope.tab=null,$scope.setTab=function(id){$scope.tab=id},$rootScope.showHeader=!1,$rootScope.app.settings.asideFolded=!0,$scope.$on("$destroy",function(){$rootScope.showHeader=!0,$rootScope.app.settings.asideFolded=!1,$rootScope.noMenuStyle={}}),psResponsive("< small")?$rootScope.noMenuStyle={"padding-top":"0px",width:"105%","background-color":"none"}:$rootScope.noMenuStyle={"padding-top":"0px","margin-left":"-60px",width:"105%","background-color":"none"},angular.element($window).on("resize",function(){psResponsive("< small")?$rootScope.noMenuStyle={"padding-top":"0px",width:"105%","background-color":"none"}:$rootScope.noMenuStyle={"padding-top":"0px","margin-left":"-60px",width:"105%","background-color":"none"}}),$scope.filterAccounts=function(user){return!(!$rootScope.currentUser||"mravinale@gmail.com"!==$rootScope.currentUser.email)||"Free"!==user.accountType},publicService.getAllUsers().success(function(response,status,headers,config){$rootScope.currentUser&&"mravinale@gmail.com"===$rootScope.currentUser.email?$scope.users=response:$scope.users=_.reject(response,function(user){return"Free"==user.accountType}),$scope.devices=_.reduce($scope.users,function(memo,user){return memo+user.statistics.devices},0),$scope.messages=_.reduce($scope.users,function(memo,user){return memo+user.statistics.messages},0),$scope.sensors=_.reduce($scope.users,function(memo,user){return memo+user.statistics.sensors},0)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}]),angular.module("app").controller("tutorialCtrl",["$scope","$rootScope","deviceService","sensorService","$modalInstance","userService",function($scope,$rootScope,deviceService,sensorService,$modalInstance,userService){$scope.user={showTutorial:$rootScope.currentUser.showTutorial,_id:$rootScope.currentUser._id,username:$rootScope.currentUser.username,email:$rootScope.currentUser.email},$scope.$watch("user.showTutorial",function(val){console.log(val),userService.update($scope.user).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.error(response)})}),$scope.steps=[{templateUrl:"/modules/base/views/modals/tutorial/tutorial_sensor_add.html",controller:"TutorialSensorAddCtrl"},{templateUrl:"/modules/base/views/modals/tutorial/tutorial_device_add.html",controller:"TutorialDeviceAddCtrl"},{templateUrl:"/modules/base/views/modals/tutorial/tutorial_panel_add.html",controller:"TutorialPanelAddCtrl"},{templateUrl:"/modules/base/views/modals/tutorial/tutorial_section_add.html",controller:"TutorialSectionAddCtrl"},{templateUrl:"/modules/base/views/modals/tutorial/tutorial_dashboard_add.html",controller:"TutorialDashboardAddCtrl"}]}]),angular.module("app").controller("paymentCtrl",["$scope","$rootScope","$modalInstance","userService","userId","alerts","StripeCheckout","$http",function($scope,$rootScope,$modalInstance,userService,userId,alerts,StripeCheckout,$http){$scope.user={};var alert=null,handler=null,token="sk_live_sTn2T9WqJhZpGzo5P9yXcNTl",formalizer=function(data){var str=[];for(var d in data)str.push(encodeURIComponent(d)+"="+encodeURIComponent(data[d]));return str.join("&")};StripeCheckout.load().then(function(result){handler=StripeCheckout.configure({name:"ConnectingThings",image:"assets/img/logo.png",locale:"auto",token:function(token,args){}})}).catch(function(response,status,headers,config){console.log(response),alert=alerts.create("An error has occurred, try again","danger")}),userService.getById(userId).success(function(response,status,headers,config){$scope.user=response,console.log(response)}).error(function(response,status,headers,config){console.log(response),alert=alerts.create("An error has occurred, try again","danger")}),$scope.doFreeCheckout=function(){$http({method:"DELETE",url:"https://api.stripe.com/v1/subscriptions/"+$scope.user.subscription,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"}}).then(function(result){$scope.user.accountType="free",$scope.user.subscription=null,userService.update($scope.user).success(function(response,status,headers,config){$rootScope.currentUser.accountType=$scope.user.accountType,$modalInstance.close()}).error(function(response,status,headers,config){console.log(response)})},function(){alert=alerts.create("An error has occurred, try again","danger")})},$scope.doBronzeCheckout=function(){$scope.isAccountReady("bronze")&&handler.open({description:"Bronze Plan",amount:500}).then(function(result){return $http($scope.user.customerId?{method:"POST",url:"https://api.stripe.com/v1/customers/"+$scope.user.customerId,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({description:$scope.user.description,email:$scope.user.email,source:result[0].id})}:{method:"POST",url:"https://api.stripe.com/v1/customers",headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({description:$scope.user.description,email:$scope.user.email,source:result[0].id})})}).then(function(result){return $scope.user.customerId=result.data.id,$http($scope.user.subscription?{method:"POST",url:"https://api.stripe.com/v1/subscriptions/"+$scope.user.subscription,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({plan:"bronze"})}:{method:"POST",url:"https://api.stripe.com/v1/subscriptions",headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({customer:$scope.user.customerId,plan:"bronze"})})}).then(function(result){$scope.user.accountType="bronze",$scope.user.subscription=result.data.id,userService.update($scope.user).success(function(response,status,headers,config){$rootScope.currentUser.accountType=$scope.user.accountType,$modalInstance.close()}).error(function(response,status,headers,config){console.log(response)})},function(){alert=alerts.create("An error has occurred, try again","danger")})},$scope.doSilverCheckout=function(){$scope.isAccountReady("silver")&&handler.open({description:"Silver Plan",amount:1e3}).then(function(result){return $http($scope.user.customerId?{method:"POST",url:"https://api.stripe.com/v1/customers/"+$scope.user.customerId,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({description:$scope.user.description,email:$scope.user.email,source:result[0].id})}:{method:"POST",url:"https://api.stripe.com/v1/customers",headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({description:$scope.user.description,email:$scope.user.email,source:result[0].id})})}).then(function(result){return $scope.user.customerId=result.data.id,$http($scope.user.subscription?{method:"POST",url:"https://api.stripe.com/v1/subscriptions/"+$scope.user.subscription,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({plan:"silver"})}:{method:"POST",url:"https://api.stripe.com/v1/subscriptions",headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({customer:$scope.user.customerId,plan:"silver"})})}).then(function(result){$scope.user.accountType="silver",$scope.user.subscription=result.data.id,userService.update($scope.user).success(function(response,status,headers,config){$rootScope.currentUser.accountType=$scope.user.accountType,$modalInstance.close()}).error(function(response,status,headers,config){console.log(response)})},function(){alert=alerts.create("An error has occurred, try again","danger")})},$scope.doGoldCheckout=function(token){$scope.isAccountReady("gold")&&handler.open({description:"Golden Plan",amount:1500}).then(function(result){return $http($scope.user.customerId?{method:"POST",url:"https://api.stripe.com/v1/customers/"+$scope.user.customerId,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({description:$scope.user.description,email:$scope.user.email,source:result[0].id})}:{method:"POST",url:"https://api.stripe.com/v1/customers",headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({description:$scope.user.description,email:$scope.user.email,source:result[0].id})})}).then(function(result){return $scope.user.customerId=result.data.id,$http($scope.user.subscription?{method:"POST",url:"https://api.stripe.com/v1/subscriptions/"+$scope.user.subscription,headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({plan:"gold"})}:{method:"POST",url:"https://api.stripe.com/v1/subscriptions",headers:{Authorization:"Bearer "+token,"Content-Type":"application/x-www-form-urlencoded"},data:formalizer({customer:$scope.user.customerId,plan:"gold"})})}).then(function(result){$scope.user.accountType="gold",$scope.user.subscription=result.data.id,userService.update($scope.user).success(function(response,status,headers,config){$rootScope.currentUser.accountType=$scope.user.accountType,$modalInstance.close()}).error(function(response,status,headers,config){console.log(response)})},function(){alert=alerts.create("An error has occurred, try again","danger")})},$scope.cancel=function(){alerts.dismiss(alert),$modalInstance.dismiss("cancel")},$scope.isAccountReady=function(newAccountType){return"silver"==$scope.user.accountType&&"bronze"==newAccountType&&($scope.user.statistics.devices>=5||$scope.user.statistics.sensors>=10)?(alert=alerts.create("you should have less than 5 devices and 10 sensors","danger"),!1):"gold"==$scope.user.accountType&&"bronze"==newAccountType&&($scope.user.statistics.devices>=5||$scope.user.statistics.sensors>=10)?(alert=alerts.create("you should have less than 5 devices and 10 sensors","danger"),!1):"gold"!=$scope.user.accountType||"silver"!=newAccountType||!($scope.user.statistics.devices>=10||$scope.user.statistics.sensors>=15)||(alert=alerts.create("you should have less than 10 devices and 15 sensors","danger"),!1)}}]),angular.module("app").controller("DashboardAddCtrl",["$scope","dashboardService","panelService","sectionService","$location","$modalInstance",function($scope,dashboardService,panelService,sectionService,$location,$modalInstance){$scope.dashboard={},$scope.save=function(form){$scope.errors={},dashboardService.create($scope.dashboard).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},panelService.getAllPanels().success(function(response,status,headers,config){var nonSelectedPanels=_.filter(response,function(panel){return _.isUndefined(panel.dashboard)});if(_.isEmpty($scope.dashboard.panels))$scope.panels=nonSelectedPanels;else{var selectedDashboardPanels=_.map($scope.dashboard.panels,function(panelId){return _.where(response,{_id:panelId})[0]});$scope.panels=_.union(nonSelectedPanels,selectedDashboardPanels)}}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),sectionService.getAllSections().success(function(response,status,headers,config){var nonSelectedSections=_.filter(response,function(section){return _.isUndefined(section.dashboard)});if(_.isEmpty($scope.dashboard.sections))$scope.sections=nonSelectedSections;else{var selectedDashboardSections=_.map($scope.dashboard.sections,function(sectionId){return _.where(response,{_id:sectionId})[0]});$scope.sections=_.union(nonSelectedSections,selectedDashboardSections)}}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("DashboardEditCtrl",["$scope","$routeParams","dashboardService","sectionService","panelService","$location","$modalInstance","dashboardId",function($scope,$routeParams,dashboardService,sectionService,panelService,$location,$modalInstance,dashboardId){$scope.dashboard={addedPanels:[],removedPanels:[],addedSections:[],removedSections:[]};var originalPanels=[],originalSections=[];dashboardService.getById(dashboardId).success(function(response,status,headers,config){$scope.dashboard=_.extend(response,$scope.dashboard),originalPanels=angular.copy($scope.dashboard.panels),originalSections=angular.copy($scope.dashboard.panels)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},$scope.dashboard.addedPanels=_.filter($scope.dashboard.panels,function(panel){return!_.contains(originalSections,panel)}),$scope.dashboard.removedPanels=_.filter(originalPanels,function(panel){return!_.contains($scope.dashboard.panels,panel)}),$scope.dashboard.addedSections=_.filter($scope.dashboard.sections,function(section){return!_.contains(originalSections,section)}),$scope.dashboard.removedSections=_.filter(originalSections,function(section){return!_.contains($scope.dashboard.panels,section)}),dashboardService.update($scope.dashboard).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},panelService.getAllPanels().success(function(response,status,headers,config){var nonSelectedPanels=_.filter(response,function(panel){return _.isUndefined(panel.dashboards)});if(_.isEmpty($scope.dashboard.panels))$scope.panels=nonSelectedPanels;else{var selectedDashboardPanels=_.map($scope.dashboard.panels,function(panelId){return _.where(response,{_id:panelId})[0]});$scope.panels=_.union(nonSelectedPanels,selectedDashboardPanels)}}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),sectionService.getAllSections().success(function(response,status,headers,config){$scope.sections=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("DashboardListCtrl",["$scope","$rootScope","dashboardService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,$rootScope,dashboardService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){dashboardService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.newDashboard=function(){var modalInstance=$modal.open({templateUrl:"dashboard_add",controller:"DashboardAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("newDashboard dismissed at: "+new Date)})},$scope.editDashboard=function(dashboardId){var modalInstance=$modal.open({templateUrl:"dashboard_edit",controller:"DashboardEditCtrl",size:"lg",resolve:{dashboardId:function(){return dashboardId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("editDashboard dismissed at: "+new Date)})},$scope.delete=function(dashboard){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this dashboard!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&dashboardService.remove(dashboard._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$rootScope.$on("reload-tableParams",function(event,args){$scope.tableParams.reload()}),$scope.initDataTable()}]),angular.module("app").controller("SectionAddCtrl",["$scope","sectionService","panelService","dashboardService","$location","$localStorage","$modalInstance",function($scope,sectionService,panelService,dashboardService,$location,$localStorage,$modalInstance){$scope.section={isPublic:!0,dashboard:$localStorage.currentDashboard.id},$scope.save=function(form){$scope.errors={},sectionService.create($scope.section).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")},dashboardService.getAllDashboards().success(function(response,status,headers,config){$scope.dashboards=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}]),angular.module("app").controller("SectionEditCtrl",["$scope","$routeParams","sectionService","dashboardService","$location","$localStorage","panelService","$modalInstance","sectionId",function($scope,$routeParams,sectionService,dashboardService,$location,$localStorage,panelService,$modalInstance,sectionId){$scope.section={},sectionService.getById(sectionId).success(function(response,status,headers,config){$scope.section=response,$scope.section.dashboard=$localStorage.currentDashboard.id}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},sectionService.update($scope.section).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")},dashboardService.getAllDashboards().success(function(response,status,headers,config){$scope.dashboards=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}]),angular.module("app").controller("SectionListCtrl",["$scope","$rootScope","sectionService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,$rootScope,sectionService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){sectionService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.newSection=function(){var modalInstance=$modal.open({templateUrl:"section_add",controller:"SectionAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("newSection dismissed at: "+new Date)})},$scope.editSection=function(sectionId){var modalInstance=$modal.open({templateUrl:"section_edit",controller:"SectionEditCtrl",size:"lg",resolve:{sectionId:function(){return sectionId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("editSection dismissed at: "+new Date)})},$scope.delete=function(section){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this section!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&sectionService.remove(section._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$rootScope.$on("reload-tableParams",function(event,args){$scope.tableParams.reload()}),$scope.initDataTable()}]),angular.module("app").controller("PanelListCtrl",["$scope","$rootScope","panelService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,$rootScope,panelService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.sizeFlag=psResponsive("> small"),$scope.tableParams.typeFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){panelService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.sizeFlag=psResponsive("> small"),$scope.tableParams.typeFlag=psResponsive("> small")},$scope.newPanel=function(){var modalInstance=$modal.open({templateUrl:"modules/panels/views/panel_add_container.html",controller:"PanelAddContainerCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("newDashboard dismissed at: "+new Date)})},$scope.editPanel=function(panelId){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return panelId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("editDashboard dismissed at: "+new Date)})},$scope.delete=function(panel){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(panel._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$rootScope.$on("reload-tableParams",function(event,args){$scope.tableParams.reload()}),$scope.initDataTable()}]),angular.module("app").controller("PanelAddContainerCtrl",["$scope","$rootScope",function($scope,$rootScope){$scope.user={showTutorial:$rootScope.currentUser.showTutorial,_id:$rootScope.currentUser._id,username:$rootScope.currentUser.username,email:$rootScope.currentUser.email},$scope.steps=[{templateUrl:"/modules/panels/views/external/panel_add.html",controller:"PanelAddCtrl"},{templateUrl:"/modules/panels/views/external/sensor_add.html",controller:"PanelSensorAddCtrl"},{templateUrl:"/modules/panels/views/external/device_add.html",controller:"PanelDeviceAddCtrl"}]}]),angular.module("app").controller("PanelEditContainerCtrl",["$scope","$rootScope","panelId","$location",function($scope,$rootScope,panelId,$location){$scope.user={showTutorial:$rootScope.currentUser.showTutorial,_id:$rootScope.currentUser._id,username:$rootScope.currentUser.username,email:$rootScope.currentUser.email,panelId:panelId},$location.search({panelId:panelId}),$scope.steps=[{templateUrl:"/modules/panels/views/external/panel_edit.html",controller:"PanelEditCtrl"},{templateUrl:"/modules/panels/views/external/sensor_add.html",controller:"PanelSensorAddCtrl"},{templateUrl:"/modules/panels/views/external/device_add.html",controller:"PanelDeviceAddCtrl"}]}]),angular.module("app").controller("PanelAddCtrl",["$scope","panelService","deviceService","cameraService","dashboardService","$location","$localStorage",function($scope,panelService,deviceService,cameraService,dashboardService,$location,$localStorage){$scope.panel={isPublic:!0,dashboard:$localStorage.currentDashboard.id};var params=$location.search();$scope.addSensor=function(){$location.search({id:2,deviceId:$scope.panel.device})},$scope.addDevice=function(){$location.search("id",3)},$scope.save=function(form){$scope.errors={},panelService.create($scope.panel).success(function(response,status,headers,config){$scope.$finish()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.$watch("panel.device",function(deviceId){deviceId&&deviceService.getFullById(deviceId).success(function(response,status,headers,config){$scope.sensors=response.sensors,$scope.panel.sensor=params.sensorId?params.sensorId:$scope.sensors[0]?$scope.sensors[0]._id:null}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}),$scope.$watch("panel.camera",function(camera){camera&&($scope.panel.sensor=null,$scope.panel.device=null,$scope.panel.section=null)}),$scope.$watch("panel.sensor",function(sensor){sensor&&($scope.panel.camera=null,$scope.panel.section=null)}),deviceService.getAllDevices().success(function(response,status,headers,config){$scope.devices=response,$scope.panel.device=params.deviceId?params.deviceId:$scope.devices[0]?$scope.devices[0]._id:null}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),cameraService.getAllCameras().success(function(response,status,headers,config){$scope.cameras=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),dashboardService.getAllDashboards().success(function(response,status,headers,config){$scope.dashboards=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}]),angular.module("app").controller("PanelEditCtrl",["$scope","$routeParams","panelService","dashboardService","deviceService","cameraService","$location","$localStorage",function($scope,$routeParams,panelService,dashboardService,deviceService,cameraService,$location,$localStorage){
$scope.panel={};var params=$location.search();$scope.addSensor=function(){$location.search({id:2,panelId:params.panelId,deviceId:$scope.panel.device})},$scope.addDevice=function(){$location.search({id:3,panelId:params.panelId})},panelService.getById(params.panelId).success(function(response,status,headers,config){$scope.panel=response,$scope.panel.dashboard=$localStorage.currentDashboard.id}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),deviceService.getAllDevices().success(function(response,status,headers,config){$scope.devices=response,$scope.panel.device=params.deviceId?params.deviceId:$scope.panel.device?$scope.panel.device:$scope.devices[0]._id}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),cameraService.getAllCameras().success(function(response,status,headers,config){$scope.cameras=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),dashboardService.getAllDashboards().success(function(response,status,headers,config){$scope.dashboards=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},panelService.update($scope.panel).success(function(response,status,headers,config){$scope.$finish()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.$watch("panel.device",function(deviceId){deviceId&&deviceService.getFullById(deviceId).success(function(response,status,headers,config){$scope.sensors=response.sensors,$scope.panel.sensor=params.sensorId?params.sensorId:$scope.panel.sensor?$scope.panel.sensor:$scope.sensors[0]._id}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}),$scope.$watch("panel.camera",function(camera){camera&&($scope.panel.sensor=null,$scope.panel.device=null)}),$scope.$watch("panel.sensor",function(sensor){sensor&&($scope.panel.camera=null)})}]),angular.module("app").controller("PanelSensorAddCtrl",["$scope","sensorService","deviceService","$location",function($scope,sensorService,deviceService,$location){var alert=null;$scope.sensor={},$scope.device={};var params=$location.search();deviceService.getById(params.deviceId).success(function(response,status,headers,config){$scope.device=response}).error(function(response,status,headers,config){alert=alerts.create("There was an error trying to save the transaction, please try again","danger")}),$scope.save=function(form){$scope.errors={},sensorService.create($scope.sensor).success(function(sensorResponse,status,headers,config){params.sensorId=sensorResponse._id,$scope.device.sensors.push(sensorResponse._id),deviceService.update($scope.device).success(function(deviceResponse,status,headers,config){params.id=1,$location.search(params)}).error(function(response,status,headers,config){alert=alerts.create("There was an error trying to save the transaction, please try again","danger")})}).error(function(response,status,headers,config){!response.errors&&response.message&&(alert=alerts.create(response.message,"danger")),angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.goBack=function(){$location.search("id",1)}}]),angular.module("app").controller("PanelDeviceAddCtrl",["$scope","$rootScope","deviceService","sensorService","$filter","$location",function($scope,$rootScope,deviceService,sensorService,$filter,$location){var alert=null;$scope.device={name:""};var params=$location.search();$scope.$watch("device.name",function(){$scope.device.name=$filter("lowercase")($scope.device.name)}),$scope.save=function(form){$scope.errors={},deviceService.create($scope.device).success(function(response,status,headers,config){params.id=1,params.deviceId=response._id,$location.search(params)}).error(function(response,status,headers,config){!response.errors&&response.message&&(alert=alerts.create(response.message,"danger")),angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.goBack=function(){$location.search("id",1)}}]),angular.module("app").controller("DeviceAddCtrl",["$scope","deviceService","sensorService","$modalInstance","$filter","alerts",function($scope,deviceService,sensorService,$modalInstance,$filter,alerts){var alert=null;$scope.device={name:""},$scope.$watch("device.name",function(){$scope.device.name=$filter("lowercase")($scope.device.name)}),$scope.save=function(form){$scope.errors={},deviceService.create($scope.device).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){!response.errors&&response.message&&(alert=alerts.create(response.message,"danger")),angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},sensorService.getAllSensors().success(function(response,status,headers,config){$scope.sensors=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){alerts.dismiss(alert),$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("DeviceEditCtrl",["$scope","$routeParams","deviceService","sensorService","$location","$modalInstance","deviceId","$filter",function($scope,$routeParams,deviceService,sensorService,$location,$modalInstance,deviceId,$filter){$scope.device={name:""},$scope.$watch("device.name",function(){$scope.device.name=$filter("lowercase")($scope.device.name)}),deviceService.getById(deviceId).success(function(response,status,headers,config){$scope.device=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},deviceService.update($scope.device).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},sensorService.getAllSensors().success(function(response,status,headers,config){$scope.sensors=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("DeviceListCtrl",["$scope","$rootScope","deviceService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,$rootScope,deviceService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){deviceService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.newDevice=function(){var modalInstance=$modal.open({templateUrl:"device_add",controller:"DeviceAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("newDevice dismissed at: "+new Date)})},$scope.editDevice=function(deviceId){var modalInstance=$modal.open({templateUrl:"device_edit",controller:"DeviceEditCtrl",size:"lg",resolve:{deviceId:function(){return deviceId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("editDevice dismissed at: "+new Date)})},$scope.delete=function(device){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this device!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&deviceService.remove(device._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$rootScope.$on("reload-tableParams",function(event,args){$scope.tableParams.reload()}),$scope.initDataTable()}]),angular.module("app").controller("SensorAddCtrl",["$scope","sensorService","$location","$modalInstance","$filter","alerts",function($scope,sensorService,$location,$modalInstance,$filter,alerts){var alert=null;$scope.sensor={tag:""},$scope.$watch("sensor.tag",function(){$scope.sensor.tag=$filter("lowercase")($scope.sensor.tag)}),$scope.save=function(form){$scope.errors={},sensorService.create($scope.sensor).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){!response.errors&&response.message&&(alert=alerts.create(response.message,"danger")),angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){alerts.dismiss(alert),$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("SensorEditCtrl",["$scope","$routeParams","sensorService","$modalInstance","sensorId","$filter",function($scope,$routeParams,sensorService,$modalInstance,sensorId,$filter){$scope.sensor={tag:""},$scope.$watch("sensor.tag",function(){$scope.sensor.tag=$filter("lowercase")($scope.sensor.tag)}),sensorService.getById(sensorId).success(function(response,status,headers,config){$scope.sensor=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},sensorService.update($scope.sensor).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("SensorListCtrl",["$scope","$rootScope","sensorService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,$rootScope,sensorService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){sensorService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small"),$scope.tableParams.tagFlag=psResponsive("> small")},$scope.newSensor=function(){var modalInstance=$modal.open({templateUrl:"sensor_add",controller:"SensorAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("new sensor dismissed at: "+new Date)})},$scope.editSensor=function(sensorId){var modalInstance=$modal.open({templateUrl:"sensor_edit",controller:"SensorEditCtrl",size:"lg",resolve:{sensorId:function(){return sensorId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("edit sensor dismissed at: "+new Date)})},$scope.delete=function(device){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this sensor!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&sensorService.remove(device._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$rootScope.$on("reload-tableParams",function(event,args){$scope.tableParams.reload()}),$scope.initDataTable()}]),angular.module("app").controller("CameraAddCtrl",["$scope","cameraService","sensorService","$location","$modalInstance",function($scope,cameraService,sensorService,$location,$modalInstance){$scope.camera={},$scope.save=function(form){$scope.errors={},cameraService.create($scope.camera).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("CameraEditCtrl",["$scope","$routeParams","cameraService","sensorService","$location","$modalInstance","cameraId",function($scope,$routeParams,cameraService,sensorService,$location,$modalInstance,cameraId){$scope.camera={},cameraService.getById(cameraId).success(function(response,status,headers,config){$scope.camera=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},cameraService.update($scope.camera).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("CameraListCtrl",["$scope","cameraService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,cameraService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){cameraService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.newCamera=function(){var modalInstance=$modal.open({templateUrl:"camera_add",controller:"CameraAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("newDashboard dismissed at: "+new Date)})},$scope.editCamera=function(cameraId){var modalInstance=$modal.open({templateUrl:"camera_edit",controller:"CameraEditCtrl",size:"lg",resolve:{cameraId:function(){return cameraId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("editDashboard dismissed at: "+new Date)})},$scope.delete=function(camera){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this camera!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&cameraService.remove(camera._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$scope.initDataTable()}]),angular.module("app").controller("MessageListCtrl",["$scope","$rootScope","messageService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,$rootScope,messageService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{topic:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){messageService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.delete=function(message){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this message!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&messageService.remove(message._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$rootScope.$on("reload-tableParams",function(event,args){$scope.tableParams.reload()}),$scope.initDataTable()}]),angular.module("app").controller("UserAddCtrl",["$scope","userService","$location","$modalInstance","$rootScope","organizationService",function($scope,userService,$location,$modalInstance,$rootScope,organizationService){$scope.user={},$scope.errors={},$scope.updateOrganization=function(form){form.organization.$error.mongoose=!1},$scope.save=function(form){userService.create($scope.user).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},organizationService.getAllOrganizations().success(function(response,status,headers,config){$scope.organizations=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("UserEditCtrl",["$scope","$routeParams","userService","$localStorage","$modalInstance","userId","organizationService",function($scope,$routeParams,userService,$localStorage,$modalInstance,userId,organizationService){$scope.user={},$scope.updateOrganization=function(form){form.organization.$error.mongoose=!1},userService.getById(userId).success(function(response,status,headers,config){$scope.user=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},userService.update($scope.user).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},organizationService.getAllOrganizations().success(function(response,status,headers,config){$scope.organizations=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("UserListCtrl",["$scope","userService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,userService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.emailFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){userService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.emailFlag=psResponsive("> small")},$scope.newUser=function(){var modalInstance=$modal.open({templateUrl:"user_add",controller:"UserAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("new user dismissed at: "+new Date)})},$scope.editUser=function(userId){var modalInstance=$modal.open({templateUrl:"user_edit",controller:"UserEditCtrl",size:"lg",resolve:{userId:function(){return userId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("edit user dismissed at: "+new Date)})},$scope.delete=function(device){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this user!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&userService.remove(device._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$scope.initDataTable()}]),angular.module("app").controller("UserSettingsCtrl",["$scope","md5Helper","$routeParams","userService","$localStorage","$modalInstance","userId","organizationService",function($scope,md5Helper,$routeParams,userService,$localStorage,$modalInstance,userId,organizationService){$scope.user={},userService.getById(userId).success(function(response,status,headers,config){$scope.user=response,$scope.user.hash=md5Helper.createHash($scope.user.email)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})}),$scope.save=function(form){$scope.errors={},userService.update($scope.user).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},organizationService.getAllOrganizations().success(function(response,status,headers,config){$scope.organizations=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").factory("md5Helper",function(){var md5={createHash:function(str){var xl,k,AA,BB,CC,DD,a,b,c,d,rotateLeft=function(lValue,iShiftBits){return lValue<<iShiftBits|lValue>>>32-iShiftBits},addUnsigned=function(lX,lY){var lX4,lY4,lX8,lY8,lResult;return lX8=2147483648&lX,lY8=2147483648&lY,lX4=1073741824&lX,lY4=1073741824&lY,lResult=(1073741823&lX)+(1073741823&lY),lX4&lY4?2147483648^lResult^lX8^lY8:lX4|lY4?1073741824&lResult?3221225472^lResult^lX8^lY8:1073741824^lResult^lX8^lY8:lResult^lX8^lY8},_F=function(x,y,z){return x&y|~x&z},_G=function(x,y,z){return x&z|y&~z},_H=function(x,y,z){return x^y^z},_I=function(x,y,z){return y^(x|~z)},_FF=function(a,b,c,d,x,s,ac){return a=addUnsigned(a,addUnsigned(addUnsigned(_F(b,c,d),x),ac)),addUnsigned(rotateLeft(a,s),b)},_GG=function(a,b,c,d,x,s,ac){return a=addUnsigned(a,addUnsigned(addUnsigned(_G(b,c,d),x),ac)),addUnsigned(rotateLeft(a,s),b)},_HH=function(a,b,c,d,x,s,ac){return a=addUnsigned(a,addUnsigned(addUnsigned(_H(b,c,d),x),ac)),addUnsigned(rotateLeft(a,s),b)},_II=function(a,b,c,d,x,s,ac){return a=addUnsigned(a,addUnsigned(addUnsigned(_I(b,c,d),x),ac)),addUnsigned(rotateLeft(a,s),b)},convertToWordArray=function(str){for(var lWordCount,lMessageLength=str.length,lNumberOfWords_temp1=lMessageLength+8,lNumberOfWords_temp2=(lNumberOfWords_temp1-lNumberOfWords_temp1%64)/64,lNumberOfWords=16*(lNumberOfWords_temp2+1),lWordArray=new Array(lNumberOfWords-1),lBytePosition=0,lByteCount=0;lByteCount<lMessageLength;)lWordCount=(lByteCount-lByteCount%4)/4,lBytePosition=lByteCount%4*8,lWordArray[lWordCount]=lWordArray[lWordCount]|str.charCodeAt(lByteCount)<<lBytePosition,lByteCount+=1;return lWordCount=(lByteCount-lByteCount%4)/4,lBytePosition=lByteCount%4*8,lWordArray[lWordCount]=lWordArray[lWordCount]|128<<lBytePosition,lWordArray[lNumberOfWords-2]=lMessageLength<<3,lWordArray[lNumberOfWords-1]=lMessageLength>>>29,lWordArray},wordToHex=function(lValue){var lByte,lCount,wordToHexValue="",wordToHexValue_temp="";for(lCount=0;lCount<=3;lCount+=1)lByte=lValue>>>8*lCount&255,wordToHexValue_temp="0"+lByte.toString(16),wordToHexValue+=wordToHexValue_temp.substr(wordToHexValue_temp.length-2,2);return wordToHexValue},x=[],S11=7,S12=12,S13=17,S14=22,S21=5,S22=9,S23=14,S24=20,S31=4,S32=11,S33=16,S34=23,S41=6,S42=10,S43=15,S44=21;for(x=convertToWordArray(str),a=1732584193,b=4023233417,c=2562383102,d=271733878,xl=x.length,k=0;k<xl;k+=16)AA=a,BB=b,CC=c,DD=d,a=_FF(a,b,c,d,x[k+0],S11,3614090360),d=_FF(d,a,b,c,x[k+1],S12,3905402710),c=_FF(c,d,a,b,x[k+2],S13,606105819),b=_FF(b,c,d,a,x[k+3],S14,3250441966),a=_FF(a,b,c,d,x[k+4],S11,4118548399),d=_FF(d,a,b,c,x[k+5],S12,1200080426),c=_FF(c,d,a,b,x[k+6],S13,2821735955),b=_FF(b,c,d,a,x[k+7],S14,4249261313),a=_FF(a,b,c,d,x[k+8],S11,1770035416),d=_FF(d,a,b,c,x[k+9],S12,2336552879),c=_FF(c,d,a,b,x[k+10],S13,4294925233),b=_FF(b,c,d,a,x[k+11],S14,2304563134),a=_FF(a,b,c,d,x[k+12],S11,1804603682),d=_FF(d,a,b,c,x[k+13],S12,4254626195),c=_FF(c,d,a,b,x[k+14],S13,2792965006),b=_FF(b,c,d,a,x[k+15],S14,1236535329),a=_GG(a,b,c,d,x[k+1],S21,4129170786),d=_GG(d,a,b,c,x[k+6],S22,3225465664),c=_GG(c,d,a,b,x[k+11],S23,643717713),b=_GG(b,c,d,a,x[k+0],S24,3921069994),a=_GG(a,b,c,d,x[k+5],S21,3593408605),d=_GG(d,a,b,c,x[k+10],S22,38016083),c=_GG(c,d,a,b,x[k+15],S23,3634488961),b=_GG(b,c,d,a,x[k+4],S24,3889429448),a=_GG(a,b,c,d,x[k+9],S21,568446438),d=_GG(d,a,b,c,x[k+14],S22,3275163606),c=_GG(c,d,a,b,x[k+3],S23,4107603335),b=_GG(b,c,d,a,x[k+8],S24,1163531501),a=_GG(a,b,c,d,x[k+13],S21,2850285829),d=_GG(d,a,b,c,x[k+2],S22,4243563512),c=_GG(c,d,a,b,x[k+7],S23,1735328473),b=_GG(b,c,d,a,x[k+12],S24,2368359562),a=_HH(a,b,c,d,x[k+5],S31,4294588738),d=_HH(d,a,b,c,x[k+8],S32,2272392833),c=_HH(c,d,a,b,x[k+11],S33,1839030562),b=_HH(b,c,d,a,x[k+14],S34,4259657740),a=_HH(a,b,c,d,x[k+1],S31,2763975236),d=_HH(d,a,b,c,x[k+4],S32,1272893353),c=_HH(c,d,a,b,x[k+7],S33,4139469664),b=_HH(b,c,d,a,x[k+10],S34,3200236656),a=_HH(a,b,c,d,x[k+13],S31,681279174),d=_HH(d,a,b,c,x[k+0],S32,3936430074),c=_HH(c,d,a,b,x[k+3],S33,3572445317),b=_HH(b,c,d,a,x[k+6],S34,76029189),a=_HH(a,b,c,d,x[k+9],S31,3654602809),d=_HH(d,a,b,c,x[k+12],S32,3873151461),c=_HH(c,d,a,b,x[k+15],S33,530742520),b=_HH(b,c,d,a,x[k+2],S34,3299628645),a=_II(a,b,c,d,x[k+0],S41,4096336452),d=_II(d,a,b,c,x[k+7],S42,1126891415),c=_II(c,d,a,b,x[k+14],S43,2878612391),b=_II(b,c,d,a,x[k+5],S44,4237533241),a=_II(a,b,c,d,x[k+12],S41,1700485571),d=_II(d,a,b,c,x[k+3],S42,2399980690),c=_II(c,d,a,b,x[k+10],S43,4293915773),b=_II(b,c,d,a,x[k+1],S44,2240044497),a=_II(a,b,c,d,x[k+8],S41,1873313359),d=_II(d,a,b,c,x[k+15],S42,4264355552),c=_II(c,d,a,b,x[k+6],S43,2734768916),b=_II(b,c,d,a,x[k+13],S44,1309151649),a=_II(a,b,c,d,x[k+4],S41,4149444226),d=_II(d,a,b,c,x[k+11],S42,3174756917),c=_II(c,d,a,b,x[k+2],S43,718787259),b=_II(b,c,d,a,x[k+9],S44,3951481745),a=addUnsigned(a,AA),b=addUnsigned(b,BB),c=addUnsigned(c,CC),d=addUnsigned(d,DD);var temp=wordToHex(a)+wordToHex(b)+wordToHex(c)+wordToHex(d);return temp.toLowerCase()}};return md5}),angular.module("app").controller("OrganizationAddCtrl",["$scope","organizationService","$location","$modalInstance",function($scope,organizationService,$location,$modalInstance){$scope.organization={},$scope.errors={},$scope.save=function(form){organizationService.create($scope.organization).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("OrganizationEditCtrl",["$scope","$routeParams","organizationService","$localStorage","$modalInstance","organizationId",function($scope,$routeParams,organizationService,$localStorage,$modalInstance,organizationId){$scope.organization={},organizationService.getById(organizationId).success(function(response,status,headers,config){$scope.organization=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},organizationService.update($scope.organization).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("OrganizationListCtrl",["$scope","organizationService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,organizationService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){organizationService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){
form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.newOrganization=function(){var modalInstance=$modal.open({templateUrl:"organization_add",controller:"OrganizationAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("new organization dismissed at: "+new Date)})},$scope.editOrganization=function(organizationId){var modalInstance=$modal.open({templateUrl:"organization_edit",controller:"OrganizationEditCtrl",size:"lg",resolve:{organizationId:function(){return organizationId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("edit organization dismissed at: "+new Date)})},$scope.delete=function(device){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this organization!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&organizationService.remove(device._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$scope.initDataTable()}]),angular.module("app").controller("TriggerAddCtrl",["$scope","triggerService","deviceService","cameraService","$location","$modalInstance",function($scope,triggerService,deviceService,cameraService,$location,$modalInstance){$scope.trigger={threshold:300},$scope.save=function(form){$scope.errors={},triggerService.create($scope.trigger).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.$watch("trigger.device",function(deviceId){deviceService.getFullById(deviceId).success(function(response,status,headers,config){$scope.sensors=response.sensors}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}),deviceService.getAllDevices().success(function(response,status,headers,config){$scope.devices=response,$scope.trigger.device=$scope.devices[0]?$scope.devices[0]._id:null}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("TriggerEditCtrl",["$scope","$routeParams","triggerService","deviceService","cameraService","$location","$modalInstance","triggerId",function($scope,$routeParams,triggerService,deviceService,cameraService,$location,$modalInstance,triggerId){$scope.trigger={},triggerService.getById(triggerId).success(function(response,status,headers,config){$scope.trigger=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),deviceService.getAllDevices().success(function(response,status,headers,config){$scope.devices=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.save=function(form){$scope.errors={},triggerService.update($scope.trigger).success(function(response,status,headers,config){$modalInstance.close()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.$watch("trigger.device",function(deviceId){deviceService.getFullById(deviceId).success(function(response,status,headers,config){$scope.sensors=response.sensors}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}),deviceService.getAllDevices().success(function(response,status,headers,config){$scope.devices=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("app").controller("TriggerListCtrl",["$scope","triggerService","ngTableParams","$modal","$log","psResponsive","$window","SweetAlert",function($scope,triggerService,ngTableParams,$modal,$log,psResponsive,$window,SweetAlert){$scope.errors={},$scope.filters={searchFilter:""},angular.element($window).on("resize",function(){$scope.tableParams.ruleFlag=psResponsive("> small"),$scope.tableParams.valueFlag=psResponsive("> small"),$scope.tableParams.descriptionFlag=psResponsive("> small")}),$scope.initDataTable=function(){$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{name:"asc"},filter:$scope.filters},{total:0,getData:function($defer,params){triggerService.getAll(params).success(function(response,status,headers,config){params.total(response.count),$defer.resolve(response.data)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})}}),$scope.tableParams.ruleFlag=psResponsive("> small"),$scope.tableParams.valueFlag=psResponsive("> small"),$scope.tableParams.descriptionFlag=psResponsive("> small")},$scope.newTrigger=function(){var modalInstance=$modal.open({templateUrl:"trigger_add",controller:"TriggerAddCtrl",size:"lg"});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("newDashboard dismissed at: "+new Date)})},$scope.editTrigger=function(triggerId){var modalInstance=$modal.open({templateUrl:"trigger_edit",controller:"TriggerEditCtrl",size:"lg",resolve:{triggerId:function(){return triggerId}}});modalInstance.result.then(function(){$scope.tableParams.reload()},function(){$log.info("editDashboard dismissed at: "+new Date)})},$scope.delete=function(trigger){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this trigger!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&triggerService.remove(trigger._id).success(function(response,status,headers,config){$scope.tableParams.reload()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.type})})})},$scope.initDataTable()}]),angular.module("app").service("sessionService",["$http",function($http){this.confirmUser=function(id){return $http.put("/auth/session/confirm/"+id)},this.create=function(user){return $http.post("/auth/session/user",user)},this.sendChangePwdEmail=function(email){return $http.post("/auth/session/sendPwdEmail",{email:email})},this.confirmPwd=function(params){return $http.post("/auth/session/confirmPwd/"+params.guid,{password:params.pwd})},this.login=function(provider,user){return $http.post("/auth/session",{provider:provider,email:user.email,password:user.password,rememberMe:user.rememberMe})},this.remove=function(){return $http.delete("/auth/session/")},this.getCurrentUser=function(){return $http.delete("/auth/session/")}}]),angular.module("app").service("panelService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/panels",{params:paramsToSend})},this.getAllPanels=function(){return $http.get("/panels/items")},this.getById=function(panelId){return $http.get("/panels/"+panelId)},this.create=function(panel){return $http.post("/panels",panel)},this.remove=function(panelId){return $http.delete("/panels/"+panelId)},this.update=function(panel){return $http.put("/panels/"+panel._id,panel)},this.command=function(command){return $http.post("/panels/command",command)}}]),angular.module("app").service("cameraService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/cameras",{params:paramsToSend})},this.getAllCameras=function(){return $http.get("/cameras/items")},this.getById=function(panelId){return $http.get("/cameras/"+panelId)},this.getFullById=function(panelId){return $http.get("/cameras/full/"+panelId)},this.create=function(camera){return $http.post("/cameras",camera)},this.remove=function(cameraId){return $http.delete("/cameras/"+cameraId)},this.update=function(panel){return $http.put("/cameras/"+panel._id,panel)}}]),angular.module("app").service("userService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/users",{params:paramsToSend})},this.getAllUsers=function(){return $http.get("/users/items")},this.getById=function(userId){return $http.get("/users/"+userId)},this.create=function(user){return $http.post("/users",user)},this.remove=function(userId){return $http.delete("/users/"+userId)},this.update=function(user){return $http.put("/users/"+user._id,user)}}]),angular.module("app").service("triggerService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/triggers",{params:paramsToSend})},this.getAllTriggers=function(){return $http.get("/triggers/items")},this.getById=function(triggerId){return $http.get("/triggers/"+triggerId)},this.create=function(trigger){return $http.post("/triggers",trigger)},this.remove=function(triggerId){return $http.delete("/triggers/"+triggerId)},this.update=function(trigger){return $http.put("/triggers/"+trigger._id,trigger)},this.command=function(command){return $http.post("/triggers/command",command)}}]),angular.module("app").service("deviceService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/devices",{params:paramsToSend})},this.getAllDevices=function(){return $http.get("/devices/items")},this.getById=function(panelId){return $http.get("/devices/"+panelId)},this.getFullById=function(panelId){return $http.get("/devices/full/"+panelId)},this.create=function(device){return $http.post("/devices",device)},this.remove=function(deviceId){return $http.delete("/devices/"+deviceId)},this.update=function(panel){return $http.put("/devices/"+panel._id,panel)}}]),angular.module("app").service("sensorService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/sensors",{params:paramsToSend})},this.getAllSensors=function(){return $http.get("/sensors/items")},this.getById=function(sensorId){return $http.get("/sensors/"+sensorId)},this.create=function(sensor){return $http.post("/sensors",sensor)},this.remove=function(sensorId){return $http.delete("/sensors/"+sensorId)},this.update=function(sensor){return $http.put("/sensors/"+sensor._id,sensor)}}]),angular.module("app").service("sectionService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/sections",{params:paramsToSend})},this.getAllSections=function(){return $http.get("/sections/items")},this.getById=function(sectionId){return $http.get("/sections/"+sectionId)},this.create=function(section){return $http.post("/sections",section)},this.remove=function(sectionId){return $http.delete("/sections/"+sectionId)},this.update=function(section){return $http.put("/sections/"+section._id,section)}}]),angular.module("app").service("dashboardService",["$http",function($http){this.getMyDashboard=function(){return $http.get("/mydashboard")},this.createMyDashboard=function(dashboardsChanges){return $http.post("/mydashboard",dashboardsChanges)},this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/dashboards",{params:paramsToSend})},this.getAllDashboards=function(){return $http.get("/dashboards/items")},this.getById=function(dashboardId){return $http.get("/dashboards/"+dashboardId)},this.getFullById=function(dashboardId){return $http.get("/dashboards/full/"+dashboardId)},this.create=function(dashboard){return $http.post("/dashboards",dashboard)},this.remove=function(dashboardId){return $http.delete("/dashboards/"+dashboardId)},this.update=function(dashboard){return $http.put("/dashboards/"+dashboard._id,dashboard)}}]),angular.module("app").service("messageService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/messages",{params:paramsToSend})},this.getAllMessages=function(param){return $http.get("/messages/items",{params:{topic:param}})},this.getById=function(panelId){return $http.get("/messages/"+panelId)},this.remove=function(messageId){return $http.delete("/messages/"+messageId)}}]),angular.module("app").service("organizationService",["$http",function($http){this.getAll=function(params){var paramsToSend={page:params.page()-1,count:params.count(),orderBy:params.sorting(),search:params.filter().searchFilter};return $http.get("/organizations",{params:paramsToSend})},this.getAllOrganizations=function(){return $http.get("/organizations/items")},this.getById=function(organizationId){return $http.get("/organizations/"+organizationId)},this.create=function(organization){return $http.post("/organizations",organization)},this.remove=function(organizationId){return $http.delete("/organizations/"+organizationId)},this.update=function(organization){return $http.put("/organizations/"+organization._id,organization)}}]),angular.module("app").constant("focusConfig",{focusClass:"focused"}).directive("onFocus",["focusConfig",function(focusConfig){return{restrict:"A",require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$focused=!1,element.bind("focus",function(evt){element.addClass(focusConfig.focusClass),scope.$apply(function(){ngModel.$focused=!0})}).bind("blur",function(evt){element.removeClass(focusConfig.focusClass),scope.$apply(function(){ngModel.$focused=!1})})}}}]),angular.module("app").directive("mongooseError",function(){return{restrict:"A",require:"ngModel",link:function(scope,element,attrs,ngModel){element.on("keydown",function(){return ngModel.$setValidity("mongoose",!0)})}}}),angular.module("app").directive("headway",function(){return{restrict:"A",link:function(scope,element,attrs){$.getScript("https://cdn.headwayapp.co/widget.js")}}}),angular.module("app").directive("panelGauge",["socket","messageService","$modal","$log","$rootScope","SweetAlert","panelService","$location",function(socket,messageService,$modal,$log,$rootScope,SweetAlert,panelService,$location){return{scope:{name:"@",topic:"@",key:"@",sensor:"@",device:"@",panel:"@",tag:"@",label:"@",min:"=",max:"=",size:"=",initValue:"="},restrict:"E",replace:!0,template:' <div class="panel panel-default" ng-mouseover="panelCogStyle=dark" ng-mouseleave="panelCogStyle=grey"><div class="panel-heading"><i class="fa fa-bar-chart-o fa-fw"></i> {{name}}<div class="pull-right" ng-if="areOptionsEnabled"><div class="btn-group"><li type="button" class="dropdown hidden-sm" style="list-style:none;"><a href class="dropdown-toggle ng-binding" ng-style="panelCogStyle" data-toggle="dropdown" aria-haspopup="true"  aria-haspopup="true"  aria-expanded="false"> <i class="fa fa-cog fa-fw"></i> </a><ul class="dropdown-menu dropdown-menu-right animated fadeInLeft"><li><a href ng-click="editSensor()" >Edit Sensor</a></li><li><a href ng-click="editDevice()" >Edit Device</a></li><li><a href ng-click="editPanel()" >Edit Panel</a></li><li><a href ng-click="deletePanel()" >Delete Panel</a></li></ul></li></div></div></div><div class="panel-body" style="height: 233px ;"><div class="text-center"><gauge min="min" max="max" size="size" value="gaugeValue" label="{{label}}" class="gauge"></gauge></div></div></div>',link:function(scope,element,attrs){scope.panelCogStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.gaugeValue=scope.initValue?scope.initValue:0,scope.areOptionsEnabled="/app/dashboard/me"===$location.path();var items=[];messageService.getAllMessages(scope.topic).success(function(response,status,headers,config){angular.forEach(response,function(message){var item=angular.fromJson(message);item&&0!==item.value&&items.push({timestamp:moment(item.createdAt).toDate(),value:item.value})}),scope.gaugeValue=_.sortBy(items,"timestamp").reverse()[0]?_.sortBy(items,"timestamp").reverse()[0].value:"0"}).error(function(response,status,headers,config){console.error(response)}),socket.on(scope.topic,function(message){scope.gaugeValue=angular.fromJson(message).value}),scope.editSensor=function(){$modal.open({templateUrl:"../modules/sensors/views/sensor_edit.html",controller:"SensorEditCtrl",size:"lg",resolve:{sensorId:function(){return scope.sensor}}})},scope.editDevice=function(){$modal.open({templateUrl:"../modules/devices/views/device_edit.html",controller:"DeviceEditCtrl",size:"lg",resolve:{deviceId:function(){return scope.device}}})},scope.editPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return scope.panel}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editPanel dismissed at: "+new Date)})},scope.deletePanel=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").directive("panelD3Chart",["socket","messageService","$modal","$log","$rootScope","SweetAlert","panelService","$location",function(socket,messageService,$modal,$log,$rootScope,SweetAlert,panelService,$location){return{scope:{yrange:"@",topic:"@",key:"@",name:"@",sensor:"@",device:"@",panel:"@"},restrict:"E",replace:!0,template:' <div class="panel panel-default" ng-mouseover="panelCogStyle=dark" ng-mouseleave="panelCogStyle=grey"><div class="panel-heading"><i class="fa fa-bar-chart-o fa-fw"></i> {{name}}<div class="pull-right" ng-if="areOptionsEnabled"><div class="btn-group"><li type="button" class="dropdown hidden-sm" style="list-style:none;"><a href class="dropdown-toggle ng-binding" ng-style="panelCogStyle" data-toggle="dropdown" aria-haspopup="true"  aria-haspopup="true"  aria-expanded="false"> <i class="fa fa-cog fa-fw"></i> </a><ul class="dropdown-menu dropdown-menu-right animated fadeInLeft"><li><a href ng-click="editSensor()" >Edit Sensor</a></li><li><a href ng-click="editDevice()" >Edit Device</a></li><li><a href ng-click="editPanel()" >Edit Panel</a></li><li><a href ng-click="deletePanel()" >Delete Panel</a></li></ul></li></div></div></div><div class="panel-body"><div class="text-center" style="margin-top: -35px;"><nvd3-line-chart data="values" xAxisTickFormat="xAxisTickFormatFunction()" yAxisTickFormat="yAxisTickFormatFunction()" showXAxis="true" showYAxis="true" showYAxis="true" noData="No Data Yet :( " isArea="true" tooltips="true" interactive="true" tooltipcontent="toolTipContentFunction()" ></nvd3-line-chart></div></div></div>',link:function(scope,element,attrs){var items=[],lastValue=null;scope.panelCogStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.areOptionsEnabled="/app/dashboard/me"===$location.path(),scope.values=[{values:[],key:scope.name,color:"#26A69A"}],messageService.getAllMessages(scope.topic).success(function(response,status,headers,config){angular.forEach(response,function(message){var item=angular.fromJson(message);if(item&&item.value){if("0"==item.value||"1"==item.value){if(lastValue==item.value)return;items.push([moment(item.createdAt).add(-1,"milliseconds").valueOf(),"1"==item.value?"0":"1"])}items.push([moment(item.createdAt).valueOf(),item.value]),lastValue=item.value}}),0===items.length&&items.push([moment().valueOf(),"0"]),scope.values=[{values:_.sortBy(items,function(o){return o[0]}),key:scope.name,color:"#26A69A"}]}).error(function(response,status,headers,config){console.error(response)}),scope.xAxisTickFormatFunction=function(){return function(d){return d3.time.format("%H:%M:%S")(moment(d).toDate())}},scope.yAxisTickFormatFunction=function(){return function(d){return d}},scope.toolTipContentFunction=function(){return function(key,x,y,e,graph){return"<p><strong>Time: </strong>"+x+"</p><p><strong>Value: </strong>"+y+"</p>"}},scope.clean=function(){items=[],"0"!=lastValue&&"1"!=lastValue||items.push([moment().add(-1,"milliseconds").valueOf(),"1"==lastValue?"0":"1"]),items.push([moment().valueOf(),"0"]),scope.values=[{values:_.sortBy(items,function(o){return o[0]}),key:scope.name,color:"#26A69A"}]},socket.on(scope.topic,function(message){var item=angular.fromJson(message);if(item&&item.value){var messageValue=item.value;if("0"==messageValue||"1"==messageValue){var lastValue=_.sortBy(items,function(o){return o[0]})[1]?_.last(_.sortBy(items,function(o){return o[0]}))[1]:"0";if(lastValue==messageValue)return;items.push([moment().add(-1,"milliseconds").valueOf(),"1"==messageValue?"0":"1"])}items.push([moment().valueOf(),messageValue]),items.length>20&&(items=_.rest(_.sortBy(items,function(o){return o[0]}))),scope.values=[{values:_.sortBy(items,function(o){return o[0]}),key:scope.name,color:"#26A69A"}]}}),scope.editSensor=function(){$modal.open({templateUrl:"../modules/sensors/views/sensor_edit.html",controller:"SensorEditCtrl",size:"lg",resolve:{sensorId:function(){return scope.sensor}}})},scope.editDevice=function(){$modal.open({templateUrl:"../modules/devices/views/device_edit.html",controller:"DeviceEditCtrl",size:"lg",resolve:{deviceId:function(){return scope.device}}})},scope.editPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return scope.panel}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editPanel dismissed at: "+new Date)})},scope.deletePanel=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").directive("panelInfo",["socket","messageService","$modal","$log","$rootScope","SweetAlert","panelService","$location","psResponsive",function(socket,messageService,$modal,$log,$rootScope,SweetAlert,panelService,$location,psResponsive){return{scope:{name:"@",topic:"@",key:"@",label:"@",sensor:"@",device:"@",panel:"@"},restrict:"E",replace:!0,template:' <div class="panel panel-default" ng-mouseover="panelCogStyle=dark" ng-mouseleave="panelCogStyle=grey"><div class="panel-heading"><i class="fa fa-bar-chart-o fa-fw"></i> {{name}}<div class="pull-right" ng-if="areOptionsEnabled"><div class="btn-group"><li type="button" class="dropdown hidden-sm" style="list-style:none;"><a href class="dropdown-toggle ng-binding" ng-style="panelCogStyle" data-toggle="dropdown" aria-haspopup="true"  aria-haspopup="true"  aria-expanded="false"> <i class="fa fa-cog fa-fw"></i> </a><ul class="dropdown-menu dropdown-menu-right animated fadeInLeft"><li><a href ng-click="editSensor()" >Edit Sensor</a></li><li><a href ng-click="editDevice()" >Edit Device</a></li><li><a href ng-click="editPanel()" >Edit Panel</a></li><li><a href ng-click="deletePanel()" >Delete Panel</a></li></ul></li></div></div></div><div class="panel-body"><div class="list-group"  style="overflow-y: auto;min-height: 228px"><a href="#" class="list-group-item" ng-repeat="item in values.data"><i class="fa fa-envelope fa-fw"></i> {{item.value}}{{label}}<span class="pull-right text-muted small"><em>{{item.timestamp  | date:"medium"}}</em></span></a></div></div></div>',link:function(scope,element,attrs){var items=[];scope.panelCogStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.areOptionsEnabled="/app/dashboard/me"===$location.path(),messageService.getAllMessages(scope.topic).success(function(response,status,headers,config){angular.forEach(response,function(message){var item=angular.fromJson(message);item&&0!==item.value&&items.push({timestamp:moment(item.createdAt).toDate(),value:item.value})}),scope.values={data:_.sortBy(items,"timestamp"),max:3e3},$(element.children()[1]).children().height($(element).height()-80)}).error(function(response,status,headers,config){console.error(response)}),scope.$watch(function(){return $(element).height()},function(newValue,oldValue){psResponsive("> small")&&newValue!==oldValue&&$(element.children()[1]).children().height(newValue-80)}),socket.on(scope.topic,function(message){var item=angular.fromJson(message);item.timestamp=Date.now(),items.push(item),items.length>3e3&&items.shift(),scope.values={data:items,max:3e3}}),scope.editSensor=function(){$modal.open({templateUrl:"../modules/sensors/views/sensor_edit.html",controller:"SensorEditCtrl",size:"lg",resolve:{sensorId:function(){return scope.sensor}}})},scope.editDevice=function(){$modal.open({templateUrl:"../modules/devices/views/device_edit.html",controller:"DeviceEditCtrl",size:"lg",resolve:{deviceId:function(){return scope.device}}})},scope.editPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return scope.panel}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editPanel dismissed at: "+new Date)})},scope.deletePanel=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").directive("panelSwitch",["socket","panelService","messageService","$modal","$log","$rootScope","SweetAlert","$location","MQTTService",function(socket,panelService,messageService,$modal,$log,$rootScope,SweetAlert,$location,MQTTService){return{scope:{name:"@",topic:"@",key:"@",label:"@",url:"@",protocol:"@",tag:"@",sensor:"@",device:"@",panel:"@"},restrict:"E",replace:!0,template:' <div class="panel panel-default" ng-mouseover="panelCogStyle=dark" ng-mouseleave="panelCogStyle=grey"><div class="panel-heading"><i class="fa fa-bar-chart-o fa-fw"></i> {{name}}<div class="pull-right" ng-if="areOptionsEnabled"><div class="btn-group"><li type="button" class="dropdown hidden-sm" style="list-style:none;"><a href class="dropdown-toggle ng-binding" ng-style="panelCogStyle" data-toggle="dropdown" aria-haspopup="true"  aria-haspopup="true"  aria-expanded="false"> <i class="fa fa-cog fa-fw"></i> </a><ul class="dropdown-menu dropdown-menu-right animated fadeInLeft"><li><a href ng-click="editSensor()" >Edit Sensor</a></li><li><a href ng-click="editDevice()" >Edit Device</a></li><li><a href ng-click="editPanel()" >Edit Panel</a></li><li><a href ng-click="deletePanel()" >Delete Panel</a></li></ul></li></div></div></div><div class="panel-body text-center" style="margin-bottom: 65px;margin-top: 30px"><span class="toggle"><input checked type="checkbox" ng-model="toggleButton"><label data-off="&#10006;" data-on="&#10004;"></label><div ng-class="{\'led-green\' : toggleButton, \'led-off\' : !toggleButton }"  style="margin-top: 120px;"></div></span> </div></div>',link:function(scope,element,attrs){var items=[];scope.panelCogStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.areOptionsEnabled="/app/dashboard/me"===$location.path(),messageService.getAllMessages(scope.topic).success(function(response,status,headers,config){angular.forEach(response,function(message){var item=angular.fromJson(message);item&&0!==item.value&&items.push({timestamp:moment(item.createdAt).toDate(),value:item.value})}),scope.toggleButton=!!_.sortBy(items,"timestamp").reverse()[0]&&"1"==_.sortBy(items,"timestamp").reverse()[0].value}).error(function(response,status,headers,config){console.error(response)}),socket.on(scope.topic,function(message){var messageValue=angular.fromJson(message).value;"0"!==messageValue&&"1"!==messageValue||(scope.toggleButton="1"==messageValue)}),scope.$watch("toggleButton",function(toggle,lastToogle){if(toggle!=lastToogle){var infoToSend={topic:"device/"+scope.topic.split("/")[2]+"/key/"+scope.key,message:{value:toggle?"1":"0",tag:scope.tag}};MQTTService.send(infoToSend.topic,infoToSend.message)}}),scope.editSensor=function(){$modal.open({templateUrl:"../modules/sensors/views/sensor_edit.html",controller:"SensorEditCtrl",size:"lg",resolve:{sensorId:function(){return scope.sensor}}})},scope.editDevice=function(){$modal.open({templateUrl:"../modules/devices/views/device_edit.html",controller:"DeviceEditCtrl",size:"lg",resolve:{deviceId:function(){return scope.device}}})},scope.editPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return scope.panel}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editPanel dismissed at: "+new Date)})},scope.deletePanel=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").directive("panelCamera",["socket","$http","$interval","$modal","$log","$rootScope","SweetAlert","panelService","$location",function(socket,$http,$interval,$modal,$log,$rootScope,SweetAlert,panelService,$location){
return{scope:{name:"@",login:"@",password:"@",url:"@",panel:"@"},restrict:"E",replace:!0,template:' <div class="panel panel-default" ng-mouseover="panelCogStyle=dark" ng-mouseleave="panelCogStyle=grey"><div class="panel-heading"><i ></i> {{name}}<div class="pull-right" ng-if="areOptionsEnabled"><div class="btn-group"><li type="button" class="dropdown hidden-sm" style="list-style:none;"><a href class="dropdown-toggle ng-binding" data-toggle="dropdown" ng-style="panelCogStyle" aria-haspopup="true"  aria-haspopup="true"  aria-expanded="false"> <i class="fa fa-cog fa-fw"></i> </a><ul class="dropdown-menu dropdown-menu-right animated fadeInRight"><li><a href ng-click="editPanel()" >Edit Panel</a></li><li><a href ng-click="deletePanel()" >Delete Panel</a></li><li class="divider"></li><li><a href ng-click="reload()" class="glyphicon glyphicon-refresh" > Reload</a></li><li><a href ng-mousedown="moveUp()" ng-mouseup="stopUp()" class="glyphicon glyphicon-arrow-up" > Move Up</a></li><li><a href ng-mousedown="moveDown()" ng-mouseup="stopDown()" class="glyphicon glyphicon-arrow-down" > Move Down</a></li><li><a href ng-mousedown="moveLeft()" ng-mouseup="stopLeft()" class="glyphicon glyphicon-arrow-left" > Move Left</a></li><li><a href ng-mousedown="moveRight()" ng-mouseup="stopRight()" class="glyphicon glyphicon-arrow-right" > Move Right</a></li></ul></li></div></div></div><div class="panel-body" style="height: 233px;text-align: center"><img ng-src="{{stream}}" style="max-width:100%; max-height:100%"></div></div>',link:function(scope,element,attrs){scope.panelCogStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.areOptionsEnabled="/app/dashboard/me"===$location.path(),scope.stream="/assets/img/noSignal.png";var stream=scope.url+"/videostream.cgi?user="+scope.login+"&pwd="+scope.password+"&cb="+(new Date).getTime(),interval=$interval(function(){scope.reload()},2e3,5);scope.reload=function(){var image=new Image;image.onerror=function(){scope.stream="/assets/img/noSignal.png"},image.onload=function(){interval&&$interval.cancel(interval),scope.stream=stream},image.src=stream},scope.$on("$destroy",function(){interval&&$interval.cancel(interval)}),scope.moveUp=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=0&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.stopUp=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=1&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.moveDown=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=2&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.stopDown=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=3&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.moveLeft=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=4&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.stopLeft=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=5&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.moveRight=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=6&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.stopRight=function(){$http.jsonp(scope.url+"/decoder_control.cgi?callback=JSON_CALLBACK&command=7&user="+scope.login+"&pwd="+scope.password).success(function(response,status,headers,config){console.log(response)}).error(function(response,status,headers,config){console.log(response)})},scope.editPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return scope.panel}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editPanel dismissed at: "+new Date)})},scope.deletePanel=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").directive("panelLed",["socket","messageService","$modal","$log","$rootScope","SweetAlert","panelService","$location",function(socket,messageService,$modal,$log,$rootScope,SweetAlert,panelService,$location){return{scope:{name:"@",topic:"@",key:"@",label:"@",url:"@",protocol:"@",tag:"@",sensor:"@",device:"@",panel:"@"},restrict:"E",replace:!0,template:' <div class="panel panel-default" ng-mouseover="panelCogStyle=dark" ng-mouseleave="panelCogStyle=grey"><div class="panel-heading"><i class="fa fa-bar-chart-o fa-fw"></i> {{name}}<div class="pull-right" ng-if="areOptionsEnabled"><div class="btn-group"><li type="button" class="dropdown hidden-sm" style="list-style:none;"><a href class="dropdown-toggle ng-binding" ng-style="panelCogStyle" data-toggle="dropdown" aria-haspopup="true"  aria-haspopup="true"  aria-expanded="false"> <i class="fa fa-cog fa-fw"></i> </a><ul class="dropdown-menu dropdown-menu-right animated fadeInLeft"><li><a href ng-click="editSensor()" >Edit Sensor</a></li><li><a href ng-click="editDevice()" >Edit Device</a></li><li><a href ng-click="editPanel()" >Edit Panel</a></li><li><a href ng-click="deletePanel()" >Delete Panel</a></li></ul></li></div></div></div><div class="panel-body text-center" style="margin-bottom: 65px;margin-top: 30px"><div ng-class="{\'led-blue\' : toggleLed, \'led-off\' : !toggleLed }"  style="width:80px;height:80px"></div></div></div>',link:function(scope,element,attrs){var items=[];scope.panelCogStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.areOptionsEnabled="/app/dashboard/me"===$location.path(),messageService.getAllMessages(scope.topic).success(function(response,status,headers,config){angular.forEach(response,function(message){var item=angular.fromJson(message);item&&0!==item.value&&items.push({timestamp:moment(item.createdAt).toDate(),value:item.value})}),scope.toggleLed=!!_.sortBy(items,"timestamp").reverse()[0]&&"1"==_.sortBy(items,"timestamp").reverse()[0].value}).error(function(response,status,headers,config){console.error(response)}),socket.on(scope.topic,function(message){var messageValue=angular.fromJson(message).value;"0"!==messageValue&&"1"!==messageValue||(scope.toggleLed="1"==messageValue)}),scope.$watch(function(){return $(element).height()},function(newValue,oldValue){if(newValue!==oldValue){$(element.children()[1]).children().height(),$(element.children()[1]).children().width()}}),scope.editSensor=function(){$modal.open({templateUrl:"../modules/sensors/views/sensor_edit.html",controller:"SensorEditCtrl",size:"lg",resolve:{sensorId:function(){return scope.sensor}}})},scope.editDevice=function(){$modal.open({templateUrl:"../modules/devices/views/device_edit.html",controller:"DeviceEditCtrl",size:"lg",resolve:{deviceId:function(){return scope.device}}})},scope.editPanel=function(){var modalInstance=$modal.open({templateUrl:"../modules/panels/views/panel_edit_container.html",controller:"PanelEditContainerCtrl",size:"lg",resolve:{panelId:function(){return scope.panel}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editPanel dismissed at: "+new Date)})},scope.deletePanel=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this panel!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&panelService.remove(scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").directive("panelSection",["socket","$http","$interval","$modal","$log","$rootScope","SweetAlert","sectionService","$location",function(socket,$http,$interval,$modal,$log,$rootScope,SweetAlert,sectionService,$location){return{scope:{name:"@",section:"@"},restrict:"E",replace:!0,template:'<div class="row" ><div class="col-lg-12" ng-mouseover="panelStyle=dark" ng-mouseleave="panelStyle=grey"><h3 class="row-header" style="cursor:move" >{{name}}<span class="section_options"  style="margin-left: 20px" ><div class="btn-group" style="font-size: 20px" ng-if="areOptionsEnabled"><li type="button" class="dropdown hidden-sm"><a href class="dropdown-toggle ng-binding" ng-style="panelStyle" data-toggle="dropdown" aria-haspopup="true" aria-haspopup="true" aria-expanded="false"> <i class="fa fa-cog fa-fw"></i></a><ul class="dropdown-menu dropdown-menu-right animated fadeInLeft"><li><a href ng-click="editSection()" >Edit Section</a></li><li><a href ng-click="deleteSection()" >Delete Section</a></li></ul></li></div></span></h3></div></div>',link:function(scope,element,attrs){scope.panelStyle={color:"rgba(0,0,0,0)"},scope.grey={color:"rgba(0,0,0, 0)"},scope.dark={color:"rgba(0,0,0,.35)"},scope.areOptionsEnabled="/app/dashboard/me"===$location.path(),scope.editSection=function(){var modalInstance=$modal.open({templateUrl:"../modules/sections/views/section_edit.html",controller:"SectionEditCtrl",size:"lg",resolve:{sectionId:function(){return scope.section}}});modalInstance.result.then(function(){$rootScope.$broadcast("reload-myDashboard")},function(){$log.info("editDashboard dismissed at: "+new Date)})},scope.deleteSection=function(){SweetAlert.swal({title:"Are you sure?",text:"Your will not be able to recover this section!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel please!"},function(isConfirm){isConfirm&&sectionService.remove(scope.section).success(function(response,status,headers,config){$rootScope.$broadcast("reload-myDashboard")}).error(function(response,status,headers,config){$log.info("error deleting the panel")})})}}}}]),angular.module("app").factory("socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect(window.location.protocol+"//"+window.location.host)})}]),angular.module("app").directive("gauge",function(){return{restrict:"E",replace:!0,scope:{label:"@",min:"=",max:"=",value:"=",size:"="},link:function(scope,element,attrs){var config={size:scope.size?scope.size:220,label:attrs.label,min:void 0!==scope.min?scope.min:0,max:void 0!==scope.max?scope.max:100,minorTicks:5},range=config.max-config.min;config.yellowZones=[{from:config.min+.75*range,to:config.min+.9*range}],config.redZones=[{from:config.min+.9*range,to:config.max}],scope.gauge=new Gauge(element[0],config),scope.gauge.render(),scope.gauge.redraw(scope.value),scope.$watch("value",function(){var height=$(element).parent().parent().parent().height(),width=$(element).parent().parent().parent().width();scope.gauge&&(config.size=height<width?height-60:width-60,$(element).children().remove(),scope.gauge=new Gauge(element[0],config),scope.gauge.render(),scope.gauge.redraw(scope.value))}),scope.$watch(function(){return $(element).parent().parent().parent().height()},function(newValue,oldValue){if(newValue!==oldValue){var height=$(element).parent().parent().parent().height(),width=$(element).parent().parent().parent().width();config.size=height<width?height-60:width-60,$(element).children().remove(),scope.gauge=new Gauge(element[0],config),scope.gauge.render(),scope.gauge.redraw(scope.value)}}),scope.$watch(function(){return $(element).parent().parent().parent().width()},function(newValue,oldValue){if(newValue!==oldValue){var height=$(element).parent().parent().parent().height(),width=$(element).parent().parent().parent().width();config.size=height<width?height-60:width-60,$(element).children().remove(),scope.gauge=new Gauge(element[0],config),scope.gauge.render(),scope.gauge.redraw(scope.value)}})}}}),angular.module("app").directive("lineChart",function(){return{template:"<div></div>",scope:{chart:"=",ymin:"=",ymax:"="},restrict:"E",replace:!0,link:function(scope,element){function draw(chart){var data=chart.data,table=new google.visualization.DataTable;table.addColumn("datetime"),table.addColumn("number"),table.addRows(data.length);for(var view=new google.visualization.DataView(table),i=0;i<data.length;i++){var item=data[i];table.setCell(i,0,new Date(item.timestamp));var value=parseFloat(item.value);table.setCell(i,1,value)}var last=data[data.length-1],max=new Date(last.timestamp),min=new Date(data[0].timestamp),chartOptions={legend:"none",vAxis:{minValue:scope.ymin?scope.ymin:0,maxValue:scope.ymax?scope.ymax:100},hAxis:{viewWindow:{min:min,max:max}}};lineChart.draw(view,chartOptions)}var lineChart=new google.visualization.LineChart(element[0]);scope.$watch("chart",function(chart){chart&&chart.data&&chart.max&&draw(chart)})}}}),angular.module("app").service("publicService",["$http",function($http){this.getAllDashboards=function(id){return $http.get("/public/dashboards/user/"+id)},this.getAllUsers=function(){return $http.get("/auth/session/users/items")}}]),angular.module("app").controller("TutorialSensorAddCtrl",["$scope","$rootScope","sensorService",function($scope,$rootScope,sensorService){var alert=null;$scope.sensor={},$scope.save=function(form){$scope.errors={},sensorService.create($scope.sensor).success(function(response,status,headers,config){$rootScope.$broadcast("reload-tableParams"),$scope.$nextStep()}).error(function(response,status,headers,config){!response.errors&&response.message&&(alert=alerts.create(response.message,"danger")),angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.autocomplete=function(form){$scope.sensor={name:"Temperature",tag:"temperature",description:"Temperature Sensor Demo"}}}]),angular.module("app").controller("TutorialDeviceAddCtrl",["$scope","$rootScope","deviceService","sensorService","$location",function($scope,$rootScope,deviceService,sensorService,$location){var alert=null;$scope.device={},$scope.save=function(form){$scope.errors={},deviceService.create($scope.device).success(function(response,status,headers,config){$rootScope.$broadcast("reload-tableParams"),$scope.$nextStep()}).error(function(response,status,headers,config){!response.errors&&response.message&&(alert=alerts.create(response.message,"danger")),angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},sensorService.getAllSensors().success(function(response,status,headers,config){$scope.sensors=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.autocomplete=function(form){$scope.device={name:"arduino",description:"Arduino Demo",sensors:[$scope.sensors[0]._id]}}}]),angular.module("app").controller("TutorialPanelAddCtrl",["$scope","$rootScope","panelService","deviceService","cameraService","$location",function($scope,$rootScope,panelService,deviceService,cameraService,$location){$scope.panel={isPublic:!0},$scope.save=function(form){$scope.errors={},panelService.create($scope.panel).success(function(response,status,headers,config){$rootScope.$broadcast("reload-tableParams"),$scope.$nextStep()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},$scope.$watch("panel.device",function(deviceId){deviceService.getFullById(deviceId).success(function(response,status,headers,config){$scope.sensors=response.sensors}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})}),$scope.$watch("panel.camera",function(camera){camera&&($scope.panel.sensor=null,$scope.panel.device=null)}),$scope.$watch("panel.sensor",function(sensor){sensor&&($scope.panel.camera=null)}),deviceService.getAllDevices().success(function(response,status,headers,config){$scope.devices=response,$scope.panel.device=$scope.devices[0]?$scope.devices[0]._id:null}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),cameraService.getAllCameras().success(function(response,status,headers,config){$scope.cameras=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.autocomplete=function(){$scope.panel={type:"gauge",name:"Panel Temperature",device:$scope.devices[0]._id,sensor:$scope.sensors[0]._id,size:"small",isPublic:!0}}}]),angular.module("app").controller("TutorialSectionAddCtrl",["$scope","$rootScope","sectionService","panelService",function($scope,$rootScope,sectionService,panelService){$scope.section={isPublic:!0},$scope.save=function(form){$scope.errors={},sectionService.create($scope.section).success(function(response,status,headers,config){$rootScope.$broadcast("reload-tableParams"),$scope.$nextStep()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},panelService.getAllPanels().success(function(response,status,headers,config){$scope.panels=response,console.log(response)}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.autocomplete=function(){$scope.section={description:"Temperature Group Demo",name:"Temperature Group",panels:[$scope.panels[0]._id],isPublic:!0}}}]),angular.module("app").controller("TutorialDashboardAddCtrl",["$scope","$rootScope","dashboardService","sectionService",function($scope,$rootScope,dashboardService,sectionService){$scope.dashboard={},$scope.save=function(form){$scope.errors={},dashboardService.create($scope.dashboard).success(function(response,status,headers,config){$rootScope.$broadcast("reload-tableParams"),$rootScope.$broadcast("reload-myDashboard"),$scope.$finish()}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})})},sectionService.getAllSections().success(function(response,status,headers,config){$scope.sections=response}).error(function(response,status,headers,config){angular.forEach(response.errors,function(error,field){form[field].$setValidity("mongoose",!1),$scope.errors[field]=error.message})}),$scope.autocomplete=function(){$scope.dashboard={description:"Demo Dashboard",name:"Demo",sections:[$scope.sections[0]._id],isPublic:!0}}}]);